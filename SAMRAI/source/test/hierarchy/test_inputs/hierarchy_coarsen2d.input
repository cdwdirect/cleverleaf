/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   input file for testing patch hierarchy coarsening 
 *
 ************************************************************************/

GlobalInputs {
   // If FALSE, when an error is encountered in serial exit(-1) will be called
   // instead of SAMRAI_MPI::abort().
   call_abort_in_serial_instead_of_exit = FALSE
}

Main {
   // Dimension of problem.
   dim = 2

   // Name of log file.
   log_file_name  = "hierarchy-coarsen2d-test.log"

   // If TRUE all nodes will log to individual files.
   // If FALSE only node 0 will log.
   log_all_nodes  = TRUE
}

HierarchyTest {

   // If TRUE will test makeRefinedPatchHierarchy.
   do_refine_test  = FALSE

   // If TRUE will test makeCoarsenedPatchHierarchy.
   do_coarsen_test = TRUE

   // Refinement or coarsening ratio.
   ratio = 2,2

}

// Refer to mesh::CartesianGridGeometry and its base classes for input.
CartesianGridGeometry {
   domain_boxes = [ (0,0) , (31,23) ]
   x_lo         = 0.e0 , 0.e0    // lower end of computational domain.
   x_up         = 1.e0 , 1.e0    // upper end of computational domain.
}

// Refer to hier::PatchHierarchy for input.
PatchHierarchy {
   max_levels              = 2 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2
   }

   largest_patch_size {
      level_0 = 40, 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 2, 2
      // all finer levels will use same values as level_0...
   }

}

// Refer to mesh::BergerRigoutsos for input.
BergerRigoutsos {
   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

// Refer to mesh::GriddingAlgorithm for input.
GriddingAlgorithm {
   sequentialize_patch_indices = TRUE
}

// Refer to mesh::StandardTagAndInitialize for input.
StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"

   level_0 {
      boxes = [ (0,16) , (11,23) ],
              [ (16,0) , (31,7) ],
              [ (24,8) , (31,15) ]
   }
}

// Refer to mesh::TreeLoadBalancer for input.
TreeLoadBalancer {
  DEV_report_load_balance = TRUE
  DEV_barrier_before = FALSE
  DEV_barrier_after = FALSE
  DEV_balance_penalty_wt = 1.0
  DEV_surface_penalty_wt = 1.0

  // Debugging options
  DEV_check_map = FALSE
  DEV_check_connectivity = FALSE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
}
