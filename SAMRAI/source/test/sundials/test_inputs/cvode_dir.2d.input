/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Input file for SAMRAI CVODE test program 
 *
 ************************************************************************/

Main {

   // Dimension of the problem.  No default.
   dim                      = 2

   // Initial time.  No default.
   init_time                = 0.0
   // Initial cycle number.  No default 
   init_cycle               = 0
   // Time between printing output. No default  
   print_interval           = 1.0e-2
   // Number of intervals to print.  No default
   num_print_intervals      = 10
   // Log the solution at each print interval.  Default is FALSE
   solution_logging         = FALSE

   // Parameters needed for the CVODE solver.  No defaults unless listed.
   // Maximum iterations allowed in the solver.
   max_internal_steps       = 100000
   // Tolerances used to determine convergence
   relative_tolerance       = 1e-4
   absolute_tolerance       = 1e-4
   // 0 means used CVODE's defaults 
   max_order                = 0
   // stepping method is 1 for NORMAL and 2 for ONESTEP
   stepping_method          = 1
   // TRUE for CV_NEWTON, FALSE for CV_FUNCTIONAL
   uses_newton              = TRUE
   // Default is FALSE
   uses_preconditioning     = TRUE

   // Used for testing only
   // These values serve as baselines for testing verification.
   correct_rhs_evals        = 678
   correct_precond_setups   = 507
   correct_precond_solves   = 337
}

CVODEModel {
   // Default is 0.0
   initial_value         = 0.0

   // Use Neumann boundary conditions.  Default is FALSE.
   use_neumann_bcs    = FALSE

   // Print solver info.  Default is FALSE.
   print_solver_info  = FALSE

   // See appu::CartesianBoundaryUtilities[2,3] for input.
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      boundary_edge_xhi {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      boundary_edge_ylo {
         boundary_condition      = "DIRICHLET"
         val                     = 1.0
      }
      boundary_edge_yhi {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YDIRICHLET"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YDIRICHLET"
      }
   }

}

//See solv::FACPreconditioner for input.
fac_precond {
   max_cycles           = 1
   residual_tol         = 1.e-40
}

//See solv::CellPoissonHypreSolver for input.
hypre_solver {
   use_smg              = FALSE
}

//See mesh::StandardTagAndInitialize for input.
StandardTagAndInitialize{
   tagging_method = "REFINE_BOXES"

   level_0 {
      boxes = [ (0,0) , (9,4) ]
   }
   level_1 {
      boxes = [ (0,0) , (19,4) ]
   }
   level_2 {
      boxes = [ (0,0) , (39,4) ]
   }
}

//See tbox::TimerManager for input.
TimerManager {
   timer_list = "apps::main::*"
}

//See geom::CartesianGridGeometry and its base classes for input.
Geometry {
   domain_boxes  = [ (0,0) , (9,9) ]
   x_lo          = 0.e0 , 0.e0  // lower end of computational domain.
   x_up          = 5.e0 , 5.e0  // upper end of computational domain.
}

//See hier::PatchHierarchy for input.
PatchHierarchy {
   max_levels              = 2 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               = 2 , 2 
      level_2               = 2 , 2
      level_3               = 2 , 2
   }

   largest_patch_size {
      level_0 = 8,8 
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 1,1
      // all finer levels will use same values as level_0...
   }

}

//See mesh::BergerRigoutsos for input
BergerRigoutsos {
   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

//See mesh::GriddingAlgorithm for input
GriddingAlgorithm {
}

//See mesh::TreeLoadBalancer for input
LoadBalancer {
}

