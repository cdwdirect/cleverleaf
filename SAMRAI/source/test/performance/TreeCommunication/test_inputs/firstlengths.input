/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Code and input for benchmarking and experimentation with tree-based communication.
 *
 ************************************************************************/

/*
 * Similar to messagelengthdependency test, but make the first
 * length always 1 to force most tests to send two messages
 * for each edge.
 *
 * To be compared with messagelengthdependency to see the effects
 * of sending the extra message.
 */

Main {

  // Base name for output files.
  base_name = "firstlengths"

  // Whether to log all nodes.
  log_all_nodes = FALSE

  alter_mpi = "drop1" // "rotate" | "drop1"

}




/*
 * Define tests using databases named Test##,
 * where ## is a 2-digit integer, sequentially from 0
 */


Test00 {

  nickname = "num_int=1" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}


Test01 {

  nickname = "num_int=10" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 10 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}


Test02 {

  nickname = "num_int=100" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 100 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}


Test03 {

  nickname = "num_int=1000" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}


Test04 {

  nickname = "num_int=10000" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 10000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}


Test05 {

  nickname = "num_int=100000" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 100000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Pattern of message travel:
  // "UP", "DOWN": Up or down the tree
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  message_pattern = "UP_THEN_DOWN"
}





// Refer to tbox::TimerManager for input.
TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "tbox::*::*", "apps::*::*"
}
