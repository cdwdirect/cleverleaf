/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Code and input for benchmarking and experimentation with tree-based communication.
 *
 ************************************************************************/

/*
 * Test contention for Allreduce operation using tree communication.
 * Compare CenteredRankTree, which has the shortest hop counts with
 * BreadthFirstRankTree, which has the longest hop counts (of all
 * we have implemented) and BalancedDepthFirstTree, which has hop
 * counts in between.
 */

Main {

  // Base name for output files.
  base_name = "contention"

  // Whether to log all nodes.
  log_all_nodes = FALSE

}




/*
 * Define tests using databases named Test##,
 * where ## is a 2-digit integer, sequentially from 0
 */


Test00 {
  nickname = "crt-10" // CenteredRankTree, 10 items.
  tree_name = "CenteredRankTree"
  CenteredRankTree { // Parameters for tree of same name in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }
  msg_length = 10 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test01 {
  nickname = "bft-10" // BreadthFirstRankTree, 10 items.
  tree_name = "BreadthFirstRankTree"
  BreadthFirstRankTree { // Parameters for tree of same name in getTreeForTesting()
    tree_degree = 2
  }
  msg_length = 10 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test02 {
  nickname = "dft-10" // BalancedDepthFirstTree, 10 items.
  tree_name = "BalancedDepthFirstTree"
  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }
  msg_length = 10 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}


Test03 {
  nickname = "crt-100" // CenteredRankTree, 100 items.
  tree_name = "CenteredRankTree"
  CenteredRankTree { // Parameters for tree of same name in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }
  msg_length = 100 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test04 {
  nickname = "bft-100" // BreadthFirstRankTree, 100 items.
  tree_name = "BreadthFirstRankTree"
  BreadthFirstRankTree { // Parameters for tree of same name in getTreeForTesting()
    tree_degree = 2
  }
  msg_length = 100 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test05 {
  nickname = "dft-100" // BalancedDepthFirstTree, 100 items.
  tree_name = "BalancedDepthFirstTree"
  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }
  msg_length = 100 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}


Test06 {
  nickname = "crt-1000" // CenteredRankTree, 1000 items.
  tree_name = "CenteredRankTree"
  CenteredRankTree { // Parameters for tree of same name in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }
  msg_length = 1000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test07 {
  nickname = "bft-1000" // BreadthFirstRankTree, 1000 items.
  tree_name = "BreadthFirstRankTree"
  BreadthFirstRankTree { // Parameters for tree of same name in getTreeForTesting()
    tree_degree = 2
  }
  msg_length = 1000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test08 {
  nickname = "dft-1000" // BalancedDepthFirstTree, 1000 items.
  tree_name = "BalancedDepthFirstTree"
  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }
  msg_length = 1000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}


Test09 {
  nickname = "crt-10000" // CenteredRankTree, 10000 items.
  tree_name = "CenteredRankTree"
  CenteredRankTree { // Parameters for tree of same name in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }
  msg_length = 10000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test10 {
  nickname = "bft-10000" // BreadthFirstRankTree, 10000 items.
  tree_name = "BreadthFirstRankTree"
  BreadthFirstRankTree { // Parameters for tree of same name in getTreeForTesting()
    tree_degree = 2
  }
  msg_length = 10000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test11 {
  nickname = "dft-10000" // BalancedDepthFirstTree, 10000 items.
  tree_name = "BalancedDepthFirstTree"
  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }
  msg_length = 10000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}


Test12 {
  nickname = "crt-100000" // CenteredRankTree, 100000 items.
  tree_name = "CenteredRankTree"
  CenteredRankTree { // Parameters for tree of same name in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }
  msg_length = 100000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test13 {
  nickname = "bft-100000" // BreadthFirstRankTree, 100000 items.
  tree_name = "BreadthFirstRankTree"
  BreadthFirstRankTree { // Parameters for tree of same name in getTreeForTesting()
    tree_degree = 2
  }
  msg_length = 100000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}
Test14 {
  nickname = "dft-100000" // BalancedDepthFirstTree, 100000 items.
  tree_name = "BalancedDepthFirstTree"
  BalancedDepthFirstTree { // Parameters for tree of same name in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }
  msg_length = 100000 // Message length (units of integer)
  first_data_length = 1 // See AsyncCommPeer::limitFirstDataLength().
  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.
  repetition = 10 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.
  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().
  // Send messages up then down to simulate an all-reduce.
  message_pattern = "UP_THEN_DOWN"
}





// Refer to tbox::TimerManager for input.
TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "tbox::*::*", "apps::*::*"
}
