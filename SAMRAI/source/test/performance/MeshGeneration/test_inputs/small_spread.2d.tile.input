/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Input file for MeshGeneration tests.
 *
 ************************************************************************/

// Mesh configuration: Sinusoidal front

// Refer to lss.2d.treelb.input for full description of all input parameters
// specific to this problem.

Main {
   dim = 2

   base_name = "small_spread.2d.tile"

   write_visit = FALSE

   log_all_nodes = TRUE

   domain_boxes = [ (0,0) , (999, 999) ]
   xlo = 0.e0,   0.e0  // lower end of computational domain.
   xhi = 1.e0, 1.e0  // upper end of computational domain.

   enforce_nesting = TRUE, TRUE, TRUE

   // autoscale_base_nprocs = 1

   box_generator_type = "TileClustering"

   load_balancer_type = "CascadePartitioner"

   rank_tree_type = "CenteredRankTree"

   load_balance = TRUE, TRUE, TRUE

   write_comm_graph = FALSE

   mesh_generator_name = "ShrunkenLevelGenerator"

   ShrunkenLevelGenerator {
      domain_scale_method = 'r'
      shrink_distance_0 = 20.0, 20.0
      shrink_distance_1 = 20.0, 20.0
   }

}


TileClustering {
  tile_size = 6,6
  allow_remote_tile_extent = TRUE
  coalesce_boxes = TRUE
  DEV_log_cluster_summary = TRUE
  DEV_log_cluster = FALSE
  DEV_barrier_and_time = TRUE
}


BergerRigoutsos {
  sort_output_nodes = TRUE
  efficiency_tolerance = 0.75
  combine_efficiency = 0.75
  DEV_min_box_size_from_cutting = 4, 4
  DEV_build_zero_width_connector = TRUE
  DEV_cluster_locally = FALSE
  DEV_cluster_tiles = FALSE
  DEV_tag_coarsen_ratio = 1, 1
  DEV_inflection_cut_threshold_ar = 4.0
  DEV_log_node_history = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  // DEV_owner_mode = "SINGLE_OWNER"
  // DEV_algo_advance_mode = "SYNCHRONOUS"
}


CascadePartitioner {
  tile_size = 12,12
  flexible_load_tolerance = 0.05
  max_spread_procs = 2
  DEV_reset_obligations = TRUE
  // Debugging options
  DEV_check_map = FALSE
  DEV_check_connectivity = FALSE
  DEV_print_steps = TRUE
  DEV_print_child_steps = TRUE
  DEV_summarize_map = FALSE
}


BoxTransitSet {
  DEV_print_steps = FALSE
  DEV_print_pop_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
}


TreeLoadBalancer {
  tile_size = 12, 12
  flexible_load_tolerance = 0.05
  DEV_report_load_balance = FALSE // Reported in main
  DEV_allow_box_breaking = TRUE
  // Debugging options
  DEV_check_map = FALSE
  DEV_check_connectivity = FALSE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
  DEV_summarize_map = TRUE
}


TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 1

   largest_patch_size {
      level_0 = -1, -1
      // level_0 = 20, 20
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 6, 6
      level_1 = 6, 6
      level_2 = 6, 6
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2
      level_2            = 2, 2
      level_3            = 2, 2
      //  etc.
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 4, 4
}
