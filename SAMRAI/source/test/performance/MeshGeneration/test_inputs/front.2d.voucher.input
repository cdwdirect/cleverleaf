/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Input file for MeshGeneration tests.
 *
 ************************************************************************/

// Mesh configuration: Sinusoidal front

// Refer to lss.2d.treelb.input for full description of all input parameters
// specific to this problem.

Main {
   dim = 2

   base_name = "front.2d.voucher"

   write_visit = TRUE

   log_all_nodes = FALSE

   domain_boxes = [(0,0),(99,49)]
   xlo = 0.0, 0.0
   xhi = 2.0, 1.0

   enforce_nesting = TRUE, TRUE, TRUE

   autoscale_base_nprocs = 1

   box_generator_type = "BergerRigoutsos"

   load_balancer_type = "TreeLoadBalancer"

   rank_tree_type = "CenteredRankTree"

   load_balance = TRUE, TRUE

   write_comm_graph = FALSE

   mesh_generator_name = "SinusoidalFrontGenerator"

   SinusoidalFrontGenerator {
      init_disp = 1.0, 1.0
      period = 2.0, 4.0
      amplitude = 0.5

      buffer_distance_0 = 0.07, 0.07
      buffer_distance_1 = 0.02, 0.02
   }

}


// Used if box_generator_type is TileClustering.  Refer to mesh::TileClustering for input.
TileClustering {
  tile_size = 7, 7
  coalesce_boxes = TRUE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  DEV_debug_checks = TRUE
}


// Used if box_generator_type is BergerRigoutsos.  Refer to mesh::BergerRigoutsos for input.
BergerRigoutsos {
  sort_output_nodes = TRUE
  efficiency_tolerance = 0.75
  combine_efficiency = 0.75
  DEV_build_zero_width_connector = TRUE
  DEV_cluster_locally = FALSE
  DEV_cluster_tiles = FALSE
  // DEV_tag_coarsen_ratio = 4, 4
  DEV_inflection_cut_threshold_ar = 4.0
  DEV_min_box_size_from_cutting = 7, 7
  DEV_log_node_history = TRUE
  DEV_log_cluster_summary = TRUE
  DEV_log_cluster = FALSE
  // DEV_owner_mode = "SINGLE_OWNER"
  // DEV_algo_advance_mode = "SYNCHRONOUS"
}


// Used if load_balancer_type is TreeLoadBalancer.  Refer to mesh::TreeLoadBalancer for input.
TreeLoadBalancer {
  flexible_load_tolerance = 0.03
  DEV_voucher_mode = TRUE
  DEV_report_load_balance = TRUE // Reported in main
  DEV_balance_penalty_wt = 1.0
  DEV_surface_penalty_wt = 1.0
  DEV_slender_penalty_wt = 1.0
  DEV_precut_penalty_wt = 1.0

  // Debugging options
  DEV_check_map = TRUE
  DEV_check_connectivity = TRUE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
  DEV_summarize_map = TRUE
}

// Used if rank_tree_type is CenteredRankTree.  Refer to tbox::CenteredRankTree for input.
CenteredRankTree { // Parameters for BalancedDepthFirstTree in getRankTree()
  make_first_rank_the_root = TRUE
}

// Used if rank_tree_type is BalancedDepthFirstTree.  Refer to tbox::CenteredRankTree for input.
BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getRankTree()
  do_left_leaf_switch = TRUE
}

// Used if rank_tree_type is BreadthFirstRankTree.  Refer to tbox::CenteredRankTree for input.
BreadthFirstRankTree { // Parameters for CenteredRankTree in getRankTree()
  tree_degree = 2
}


// Refer to tbox::TimerManager for input.
TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


// Refer to hier::PatchHierarchy for input.
PatchHierarchy {

   // Specify number of levels (1, 2 or 3 for this test).
   max_levels = 3

   largest_patch_size {
      level_0 = -1,-1
   }
   smallest_patch_size {
      level_0 = 12, 12
      level_1 = 12, 12
      level_2 = 12, 12
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 3, 3
      level_2            = 3, 3
      level_3            = 3, 3
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1
}
