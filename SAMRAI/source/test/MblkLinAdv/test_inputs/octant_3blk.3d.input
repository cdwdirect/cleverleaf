/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Input file for SAMRAI LinAdv example problem 
 *
 ************************************************************************/


MblkGeometry {

   //Choices are CARTESIAN, WEDGE, and SPHERICAL_SHELL.  Only SPHERICAL_SHELL
   //sets up a multiblock problem.
   problem_type = "SPHERICAL_SHELL"

   //Define the parameters of the shell
   ShellGeometry {
      //Minimum and maximum sperical radii, no default
      rmin = 1.e0 
      rmax = 2.e0 

      //Choices are SOLID and OCTANT, no default
      shell_type = "OCTANT"
   }


   // The refinement boxes are specified here because this test was written
   // when the GriddingAlgorithm did not have any way to take in user-specified
   // refinement boxes for multiple blocks.  This could be cleaned up to use
   // the libray's standard formant. Here the format is 
   // "refine_boxes_[block]_[lev]".

   // Level 0 boxes to be refined when creating Level 1
   refine_boxes_0_0 = [(5,0,0),(5,9,9)]
   refine_boxes_1_0 = [(5,0,0),(5,9,9)]
   refine_boxes_2_0 = [(5,0,0),(5,9,9)]
   // Level 1 boxes to be refined when creating Level 2
   refine_boxes_0_1 = [(20,0,0),(20,39,39)]
   refine_boxes_1_1 = [(20,0,0),(20,39,39)]
   refine_boxes_2_1 = [(20,0,0),(20,39,39)]
}


MblkLinAdv {

   // Linear advection velocity vector--vector of length dim.
   // No default
   advection_velocity = 0.0e0 , 2.0e0 , 0.0e0

   // Order of Godunov slopes (1, 2, or 4).  Default is 1.
   godunov_order    = 2

   // Type of finite difference approximation for 3d transverse flux
   // correction.  Allowed values are CORNER_TRANSPORT_1 and
   // CORNER_TRANSPORT_2.
   // CORNER_TRANSPORT_1 means to compute numerical approximations to flux
   // terms using an extension to three dimensions of Collella's corner
   // transport upwind approach.
   // CORNER_TRANSPORT_2 means to compute numerical approximations to flux
   // terms using John Trangenstein's interpretation of the three-dimensional
   // version of Collella's corner transport upwind approach.
   // Default is "CORNER_TRANSPORT_1".
   corner_transport = "CORNER_TRANSPORT_1"  

   // General type of problem and its initial conditions.  Options are
   // "SPHERE", "PIECEWISE_CONSTANT_X", "PIECEWISE_CONSTANT_"Y,
   // "PIECEWISE_CONSTANT_Z", "SINE_CONSTANT_X", "SINE_CONSTANT_Y",
   // "SINE_CONSTANT_Z".  Specific Initial_data inputs vary by problem type.
   // No default.
   data_problem      = "SPHERE" 
   Initial_data {
      // Radius of sphere.  No default.
      radius            = 0.2   

      // Center of sphere.  No default.
      center            = 0.75 , 1.0 , 0.75

      // uval inside of sphere.  No default.
      uval_inside       = 80.0

      // uval outside of sphere.  No default.
      uval_outside      = 5.0
 
   }

   Refinement_data {
      // Use refinement boxes specified above in the MblkGeometry
      refine_criteria = "USER_DEFINED"

      // Other error-based refinement options can be used here.  See analogous
      // input documentation in test.2d.input of the applications/LinAdv
      // test.
   }

   // Boundary condition data following the format defined in
   // appu::CartesianBoundaryUtility[2,3].  Refer to these classes for details.
   Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_yhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zhi {
         boundary_condition      = "REFLECT"
      }


      boundary_edge_ylo_zlo { // XREFLECT, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zlo { // XREFLECT, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_ylo_zhi { // XREFLECT, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zhi { // XREFLECT, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_xlo_zlo { // YREFLECT, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_zhi { // YREFLECT, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zlo { // YREFLECT, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zhi { // YREFLECT, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_ylo { // ZREFLECT, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_ylo { // ZREFLECT, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xlo_yhi { // ZREFLECT, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_yhi { // ZREFLECT, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }

      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }

   }

}

Main {

   // Dimension of problem.  No default.
   dim = 3

   // File name for output log.  Default "MblkLinAdv.log"
   log_file_name    = "octant.log"

   // If true all nodes will log to individual files
   // If false only node 0 will log
   // Default is FALSE.
   log_all_nodes    = TRUE

   // Visualization dump parameters.

   // Frequency at which to dump viz output--zero to turn off
   // Default is 0.
   viz_dump_interval     = 5

   // Directory in which to place viz output.
   // No default, error will occur if viz_dump_interval > 0 and
   // this directory name is not specified.
   viz_dump_dirname      = "viz_octant-3blk"

   // Number of processors that write to each viz file, default is 1.
   visit_number_procs_per_file = 1


   // Restart dump parameters.

   // Frequency at which to dump restart output--zero to turn off
   // Default is 0.
   restart_interval       = 0         // zero to turn off

   // Directory in which to place restart output.
   // No default, error will occur if restart_interval > 0 and
   // this directory name is not specified.
   restart_write_dirname  = "restart_octant"

}

// Refer to tbox::TimerManager for input
TimerManager {
   timer_list               = "apps::*::*",
                              "algs::*::*",
                              "mesh::*::*"
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
//   print_timer_overhead   = TRUE
   print_threshold        = 0.0
}

// Refer to hier::BaseGridGeometry and geom::GridGeometry for input
BlockGeometry {
   num_blocks = 3
   domain_boxes_0 = [ (0,0,0) , (19,19,19) ]
   domain_boxes_1 = [ (0,0,0) , (19,19,19) ]
   domain_boxes_2 = [ (0,0,0) , (19,19,19) ]


   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0, 20, 0
      point_in_b_space = 0, 0, 0
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "I_UP", "K_UP", "J_DOWN"
      point_in_a_space = 0, 0, 20
      point_in_b_space = 0, 19, 0
   }

   BlockNeighbors2 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "I_UP", "J_DOWN", "K_DOWN"
      point_in_a_space = 0, 0, 20
      point_in_b_space = 0, 19, 19
   }

}

// Refer to hier::PatchHierarchy for input
PatchHierarchy {
   allow_patches_smaller_than_ghostwidth = TRUE
   max_levels = 1         // Maximum number of levels in hierarchy.
   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 2 , 2 , 2
   }
   largest_patch_size {
      level_0 = 40, 40, 40
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 2 , 2 , 2
      // all finer levels will use same values as level_0...
   }
}

// Refer to mesh::BergerRigoutsos for input
BergerRigoutsos {
   efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.95e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

// Refer to mesh::GriddingAlgorithm for input
GriddingAlgorithm{
   sequentialize_patch_indices = TRUE

}

// Refer to mesh::StandardTagAndInitialize for input
StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

// Refer to algs::HyperbolicLevelIntegrator for input
HyperbolicLevelIntegrator{
   cfl                       = 0.5e0    // max cfl factor used in problem
   cfl_init                  = 0.5e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

// Refer to algs::TimeRefinementIntegrator for input
TimeRefinementIntegrator{
   tag_buffer           = 2, 2, 2 // number of zones used in the tag buffer
   start_time           = 0.e0     // initial simulation time
   end_time             = 100.e0   // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 50    // max number of simulation timesteps
}

// Refer to mesh::TreeLoadBalancer for input
TreeLoadBalancer {
}
