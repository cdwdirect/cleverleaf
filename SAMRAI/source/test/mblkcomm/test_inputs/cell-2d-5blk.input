/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   input file for testing communication of SAMRAI cell data. 
 *
 ************************************************************************/

// Refer to cell.2d.input for full description of all input parameters
// specific to this problem.

Main {
    dim = 2
//
// Log file information
//
    log_file_name  = "cell-test.log"
    log_all_nodes  = TRUE

//
// Testing information, including number of times to perform schedule
// creation and communication processes, name of particular patch data
// test, and refine and coarsen test information
//    
    ntimes_run = 1  // default is 1

//
// Available tests are:
// 
    test_to_run = "CellMultiblockTest"
//  test_to_run = "EdgeDataTest"
//  test_to_run = "FaceDataTest"
//  test_to_run = "NodeDataTest"
//  test_to_run = "SideDataTest"
}

TimerManager {
    timer_list = "test::main::*"

// Available timers are:
//
//   "test::main::createRefineSchedule"
//   "test::main::performRefineOperations"
//   "test::main::createCoarsenSchedule"
//   "test::main::performCoarsenOperations"
//
    
}

CellMultiblockTest {

   //
   // The VariableData database is read in by the PatchDataTestStrategy
   // base class.  Each sub-database must contain variable parameter data.
   // The name of the sub-databases for each variable is arbitrary.  But
   // the names must be distinct.  
   // 
   //    Required input:  name
   //    Optional input:  depth              (default = 1)
   //                     src_ghosts         (default = 0,0,0)
   //                     dst_ghosts         (default = 0,0,0)
   //                     refine_operator    (default = "NO_REFINE")
   //
   VariableData {

      variable_1 {
         src_name = "src_var1"
         dst_name = "dst_var1"
         depth = 1
         src_ghosts = 0,0
         dst_ghosts = 1,1
         refine_operator = "NO_REFINE"
      }
   }

   RefinementData {
   }

}

BlockGridGeometry {
   num_blocks = 5
   domain_boxes_0 = [ (0,0) , (19,19) ]
   domain_boxes_1 = [ (0,0) , (19,19) ]
   domain_boxes_2 = [ (0,0) , (19,19) ]
   domain_boxes_3 = [ (0,0) , (19,19) ]
   domain_boxes_4 = [ (0,0) , (19,19) ]

   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "J_DOWN", "I_UP"
      point_in_a_space = 20,0
      point_in_b_space = 0,19
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "J_UP", "I_DOWN"
      point_in_a_space = 19,19
      point_in_b_space = 20,-1
   }

   BlockNeighbors2 {
      block_a = 0
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP"
      point_in_a_space = 19,19
      point_in_b_space = -1,-1
   }

   BlockNeighbors3 {
      block_a = 0
      block_b = 4

      rotation_b_to_a = "I_DOWN", "J_DOWN"
      point_in_a_space = 0,19
      point_in_b_space = 19,20

   }

   BlockNeighbors4 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "I_DOWN", "J_DOWN"
      point_in_a_space = 19,0
      point_in_b_space = 20,19

   }

   BlockNeighbors5 {
      block_a = 1
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP"
      point_in_a_space = 19,19
      point_in_b_space = -1,-1
   }

   BlockNeighbors6 {
      block_a = 1
      block_b = 4

      rotation_b_to_a = "J_DOWN", "I_UP"
      point_in_a_space = 19,19
      point_in_b_space = -1,20
   }

   BlockNeighbors7 {
      block_a = 2
      block_b = 3

      rotation_b_to_a = "I_DOWN", "J_DOWN"
      point_in_a_space = 0,0
      point_in_b_space = 19,-1

   }

   BlockNeighbors8 {
      block_a = 2
      block_b = 4

      rotation_b_to_a = "I_UP", "J_UP"
      point_in_a_space = 19,0
      point_in_b_space = -1,20
   }

   BlockNeighbors9 {
      block_a = 3
      block_b = 4

      rotation_b_to_a = "I_DOWN", "J_DOWN"
      point_in_a_space = 0,19
      point_in_b_space = -1,0

   }

}

PatchHierarchy {
   max_levels              = 2 // Maximum number of levels in hierarchy.
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2
      level_2               =  2 , 2
   }
   largest_patch_size {
      level_0 = 40, 40
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 2, 2
      // all finer levels will use same values as level_0...
   }
}

BergerRigoutsos {
   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

GriddingAlgorithm {
   sequentialize_patch_indices = TRUE
}

TreeLoadBalancer {
}

StandardTaggingAndInitializer {
   tagging_method = "REFINE_BOXES"
   level_0 {
      block_0 {
         boxes = [ (9,9) , (10,10) ]
      }
   }
}
