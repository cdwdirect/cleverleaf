/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   input file for testing communication of SAMRAI edge data. 
 *
 ************************************************************************/

// Refer to cell.2d.input for full description of all input parameters
// specific to this problem.

Main {
    dim = 3
//
// Log file information
//
    log_file_name  = "edge-test.log"
    log_all_nodes  = TRUE

//
// Testing information, including number of times to perform schedule
// creation and communication processes, name of particular patch data
// test
//    
    ntimes_run = 1  // default is 1

//
// Available tests are:
// 
//    test_to_run = "CellMultiblockTest"
    test_to_run = "EdgeMultiblockTest"
//  test_to_run = "FaceMultiblockTest"
//  test_to_run = "NodeMultiblockTest"
//  test_to_run = "SideMultiblockTest"
}

TimerManager {
    timer_list = "test::main::*"

// Available timers are:
//
//   "test::main::createRefineSchedule"
//   "test::main::performRefineOperations"
//   "test::main::createCoarsenSchedule"
//   "test::main::performCoarsenOperations"
//
    
}

EdgeMultiblockTest {

   //
   // The VariableData database is read in by the PatchMultiblockTestStrategy
   // base class.  Each sub-database must contain variable parameter data.
   // The name of the sub-databases for each variable is arbitrary.  But
   // the names must be distinct.  
   // 
   //    Required input:  name
   //    Optional input:  depth              (default = 1)
   //                     src_ghosts         (default = 0,0,0)
   //                     dst_ghosts         (default = 0,0,0)
   //                     refine_operator    (default = "NO_REFINE")
   //
   VariableData {

      variable_1 {
         src_name = "src_var1"
         dst_name = "dst_var1"
         depth = 1
         src_ghosts = 0,0,0
         dst_ghosts = 1,1,1
         refine_operator = "NO_REFINE"
      }
   }

   RefinementData {
   }

}

BlockGridGeometry {
   num_blocks = 3
   domain_boxes_0 = [ (0,0,0) , (20,13,15) ]
   domain_boxes_1 = [ (0,0,0) , (25,13,15) ]
   domain_boxes_2 = [ (0,0,0) , (15,25,20) ]

   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 21,0,0
      point_in_b_space = 0,0,0
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "K_UP", "J_UP", "I_DOWN"
      point_in_a_space = 0,14,0
      point_in_b_space = 15,0,0

   }

   BlockNeighbors2 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "J_UP", "K_DOWN", "I_DOWN"
      point_in_a_space = 0,14,0
      point_in_b_space = 15,0,20

   }
}

PatchHierarchy {
   max_levels              = 2 // Maximum number of levels in hierarchy.
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2 , 2
      level_2               =  2 , 2 , 2
   }
   largest_patch_size {
      level_0 = 40, 40, 40
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 2, 2, 2
      // all finer levels will use same values as level_0...
   }
}

BergerRigoutsos {
   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

GriddingAlgorithm {
}

TreeLoadBalancer {
}

StandardTaggingAndInitializer {
   tagging_method = "REFINE_BOXES"
   level_0 {
      block_0 {
         boxes = [ (5,5,5) , (6,7,7) ]
      }
   }
}
