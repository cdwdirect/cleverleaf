/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Input file for FAC solver tests.
 *
 ************************************************************************/

// Refer to allneumann2d.input for full description of all input parameters
// specific to this problem.

Main {
  dim = 3
  base_name = "allneumann3d"
  do_plot = TRUE
  max_adaptions = 3
  target_l2norm = 3.5e-4
}

fac_precond {
  max_cycles = 15
  residual_tol = 1e-10
  num_pre_sweeps = 1
  num_post_sweeps = 3
}

fac_ops {
  coarse_solver_tolerance = 1e-8
  coarse_solver_max_iterations = 10
  prolongation_method = "LINEAR_REFINE"
}

hypre_solver {
  use_smg = FALSE
}

AdaptivePoisson {
  problem_name = "sine"
    // finest_dbg_plot_ln = 0
  adaption_threshold = 3.0e-2
  sine_solution {
    SinusoidFcnControl = "{ nx=1.0 px=0.5 ny=1.0 py=0.3 nz=1.0 pz=1.8 }"
    neumann_locations = TRUE, TRUE, TRUE, TRUE, TRUE, TRUE
    linear_coef = -1.0e+00
  }
}


CartesianGridGeometry {
  domain_boxes = [(0,0,0), (7,7,7)]
  x_lo         = 0, 0, 0
  x_up         = 1, 1, 1
}

StandardTagAndInitialize {
  tagging_method = "GRADIENT_DETECTOR"
}

TreeLoadBalancer {
  DEV_report_load_balance = TRUE
  DEV_barrier_before = FALSE
  DEV_barrier_after = FALSE
}

PatchHierarchy {
   max_levels = 4
   largest_patch_size {
      level_0 = 16,16,16
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 4,4,4
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2, 2
      level_2            = 2, 2, 2
      level_3            = 2, 2, 2
      level_4            = 2, 2, 2
      level_5            = 2, 2, 2
      level_6            = 2, 2, 2
      level_7            = 2, 2, 2
      level_8            = 2, 2, 2
      level_9            = 2, 2, 2
      //  etc.
   }
   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
}

BergerRigoutsos {
   combine_efficiency = 0.95
   efficiency_tolerance = 0.95
}

GriddingAlgorithm {
   enforce_proper_nesting = TRUE
   DEV_extend_to_domain_boundary = TRUE
   // DEV_load_balance = FALSE
   check_nonrefined_tags = "IGNORE"
   sequentialize_patch_indices = TRUE
}

TimerManager{
  timer_list = "solv::FACPreconditionerX::*", "solv::ScalarPoissonFacOpsX::*", "solv::CartesianRobinBcHelperX::setBoundaryValuesInCells()_setBcCoefs()"
  print_user = TRUE
  // print_timer_overhead = TRUE
}
