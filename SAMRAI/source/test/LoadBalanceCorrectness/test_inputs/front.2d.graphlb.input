/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Load balance correctness test input file.
 *
 ************************************************************************/

// Mesh configuration: Sinusoidal front

// Refer to lss.2d.treelb.input for full description of all input parameters
// specific to this problem.

Main {
   dim = 2

   base_name = "front.2d.graphlb"

   baseline_dirname = "test_inputs"

   baseline_action = "COMPARE" // "GENERATE" or "COMPARE"

   write_visit = TRUE

   log_all_nodes = TRUE

   domain_boxes = [(0,0),(99,49)]
   xlo = 0.0, 0.0
   xhi = 2.0, 1.0

   enforce_nesting = TRUE, TRUE, TRUE

   load_balance = TRUE, TRUE

   autoscale_base_nprocs = 1

   box_generator_type = "TileClustering"

   load_balancer_type = "GraphLoadBalancer"

   mesh_generator_name = "SinusoidalFrontGenerator"

   SinusoidalFrontGenerator {
      init_disp = 1.0, 1.0
      period = 2.0, 4.0
      amplitude = 0.5

      buffer_distance_0 = 0.07, 0.07
      buffer_distance_1 = 0.02, 0.02
   }

}


TileClustering {
  tile_size = 10, 10
  coalesce_boxes = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  DEV_debug_checks = TRUE
}


BergerRigoutsos {
  sort_output_nodes = TRUE
  efficiency_tolerance = 0.85
  combine_efficiency = 0.85
  DEV_log_node_history = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
}


GraphLoadBalancer {
  tile_size = 10, 10
  target_box_size = 30,30
  coalesce_boxes = TRUE
}


TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 3

   largest_patch_size {
      level_0 = -1,-1
      level_1 = -1,-1
      level_2 = 144,144
   }
   smallest_patch_size {
      level_0 = 12, 12
      level_1 = 6, 6
      level_2 = 15, 15
   }
   ratio_to_coarser {
      level_1            = 3, 3
      level_2            = 3, 3
      level_3            = 3, 3
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1
}
