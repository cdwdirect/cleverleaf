/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and LICENSE.
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Load balance correctness test input file.
 *
 ************************************************************************/

// Mesh configuration: Lump with 2 shells

Main {
   // Dimension of problem.  No default.
   dim = 3

   // Base name for output files.
   base_name = "lss.3d.treelb"

   // Directory for baseline results.
   baseline_dirname = "test_inputs"

   // Whether to generate new baseline or compare to old.
   baseline_action = "COMPARE" // "GENERATE" or "COMPARE"

   // Whether to write visit dump.
   write_visit = TRUE

   // Whether to log all processes.
   log_all_nodes = TRUE

   // Domain definition: box, lower and upper corners.
   domain_boxes = [(0,0,0),(31,31,31)]
   xlo = 0.0, 0.0, 0.0
   xhi = 1.5, 1.5, 1.5

   // Whether to enforce nesting (one value for each level, but first value is ignored).
   enforce_nesting = TRUE, TRUE, TRUE

   // Whether to load balance (one value for each level).
   load_balance = TRUE, TRUE, TRUE

   // Scale the domain size by number of processes divided by this value.
   autoscale_base_nprocs = 4

   // Box generator types: BergerRigoutsos, TileClustering
   box_generator_type = "BergerRigoutsos"

   // Balancer types: TreeLoadBalancer, ChopAndPackLoadBalancer, TreeLoadBalancer
   load_balancer_type = "TreeLoadBalancer"

   // Tree type for TreeLoadBalancer: CenteredRankTree, BalancedDepthFirstTree, or BreadthFirstTree.
   rank_tree_type = "CenteredRankTree"

   // Mesh generator: SphericalShellGenerator, SinusoidalFrontGenerator, or ShrunkenLevelGenerator.
   mesh_generator_name = "SphericalShellGenerator"

   // Refer to SphericalShellGenerator for input.
   SphericalShellGenerator {
      radii = 0.0, 0.35,    0.70, 0.75,    1.15, 1.17

      buffer_distance_0 = 0.04, 0.04, 0.04
      buffer_distance_1 = 0.00, 0.00, 0.00
   }

}


// Used if box_generator_type is TileClustering.  Refer to mesh::TileClustering for input.
TileClustering {
  tile_size = 8, 8, 8
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  DEV_debug_checks = TRUE
}


// Used if box_generator_type is TileClustering.  Refer to mesh::TileClustering for input.
BergerRigoutsos {
  sort_output_nodes = TRUE
  efficiency_tolerance = 0.85
  combine_efficiency = 0.85
  DEV_log_node_history = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  // DEV_owner_mode = "SINGLE_OWNER"
  // DEV_algo_advance_mode = "SYNCHRONOUS"
}


// Used if load_balancer_type is TreeLoadBalancer.  Refer to mesh::TreeLoadBalancer for input.
TreeLoadBalancer {
  tile_size = 1, 1, 1
  // Debugging options
  DEV_check_map = TRUE
  DEV_check_connectivity = FALSE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = TRUE
  DEV_print_edge_steps = FALSE
  DEV_summarize_map = TRUE
}


// Used if rank_tree_type is CenteredRankTree.  Refer to tbox::CenteredRankTree for input.
CenteredRankTree {
  make_first_rank_the_root = FALSE
}

// Used if rank_tree_type is BalancedDepthFirstTree.  Refer to tbox::CenteredRankTree for input.
BalancedDepthFirstTree {
  do_left_leaf_switch = TRUE
}

// Used if rank_tree_type is BreadthFirstRankTree.  Refer to tbox::CenteredRankTree for input.
BreadthFirstRankTree {
  tree_degree = 2
}


// Refer to tbox::TimerManager for input.
TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


// Refer to hier::PatchHierarchy for input.
PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 3

   largest_patch_size {
      level_0 = -1, -1, -1
      // level_0 = 20, 20, 20
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 6, 6, 6
      level_1 = 6, 6, 6
      level_2 = 6, 6, 6
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2, 2
      level_2            = 2, 2, 2
      //  etc.
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1, 1
}

BoxTransitSet {
   DEV_print_break_steps = FALSE
}
