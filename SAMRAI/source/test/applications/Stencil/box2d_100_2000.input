Stencil {
  num_variables=100
}

Main {
   // dimension of problem
   dim = 2

   // base name of log file
   base_name = "adv.2d"

   // if true all nodes will log to individual files
   // if false only node 0 will log
   log_all_nodes    = TRUE

   // visualization dump parameters
   // frequency at which to dump viz output--zero to turn off
   viz_dump_interval    = 0
   // directory in which to place viz output
   viz_dump_dirname     = "viz_step2d"
   // number of processors which write to each viz file
   visit_number_procs_per_file = 1

   // restart dump parameters
   // frequency at which to dump restart output--zero to turn off
   restart_interval     = 0
}

// Refer to tbox::TimerManager for input
TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "*::*::*",
                              "algs::TimeRefinementIntegrator::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

// Refer to geom::CartesianGridGeometry and its base classes for input
CartesianGeometry {
   domain_boxes = [ (0,0) , (2000,2000) ]
   x_lo         = 0.e0, 0.e0 // lower end of computational domain.
   x_up         = 1e0, 1e0   // upper end of computational domain.
}

// Refer to mesh::StandardTagAndInitialize for input
StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

// Refer to hier::PatchHierarchy for input
PatchHierarchy {
   max_levels = 3         // Maximum number of levels in hierarchy.

   ratio_to_coarser {              // vector ratio to next coarser level
      level_1            = 4, 4
      level_2            = 4, 4
   }

   largest_patch_size {
      level_0 = -1, -1  // largest patch allowed in hierarchy
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 100, 100
      // all finer levels will use same values as level_0...
   }

}

// Refer to mesh::BergerRigoutsos for input
BergerRigoutsos {
   efficiency_tolerance   = 0.75e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

// Refer to mesh::GriddingAlgorithm for input
GriddingAlgorithm {
}

// Refer to algs::HyperbolicLevelIntegrator for input
HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
}

// Refer to algs::TimeRefinementIntegrator for input
TimeRefinementIntegrator {
   start_time            = 0.e0    // initial simulation time
   end_time              = 1.5e0    // final simulation time
   grow_dt               = 2e0     // growth factor for timesteps
   max_integrator_steps  = 25     // max number of simulation timesteps
}

// Refer to mesh::TreeLoadBalancer for input
LoadBalancer {
   // using default TreeLoadBalancer configuration
}
