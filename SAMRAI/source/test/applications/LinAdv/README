#########################################################################
##
## This file is part of the SAMRAI distribution.  For full copyright 
## information, see COPYRIGHT and LICENSE. 
##
## Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
## Description:   README file for Linear Advection test.
##
#########################################################################

This README explains how to compile and run the Linear Advection application.
The files in this directory are as follows:

          main.C         -  application driver program
          LinAdv.[C,h    -  C++ class containing routines specific to the
                            Linear Advection example and which are called from
                            SAMRAI AMR library routines
          LinAdvFort.h   -  header file defining external fortran routines
          fortran/2d,3d  -  Fortran numerical routines for 2d,3d problems.

To understand the construction of this application code from pieces
specific to the Linear Advection model and more generic pieces in the SAMRAI
library consider the object construction pattern in the main.C file.
For more details on library classes and the LinAdv class consult the
the comments in the header files for the library classes and the
LinAdv.h class header file.


COMPILATION AND EXECUTION
-------------------------
   Compilation:
      make main

   Execution:
      A 2D and a 3D test input file are included with LinAdv:
         test.2d.input - contains input and "correct" output data for 2D
                         test of LinAdv
         test.3d.input - same, but for 3D test. 

      serial:
         ./main test_inputs/test.[2,3]d.input
      parallel:
         Parallel execution is platform dependent.  This example demonstrates
         execution via mpirun.
         mpirun -np <nprocs> [mpirun options] ./main test_inputs/test.[2,3]d.input

      Restarted Run:
         same format as regular run but add <restart dir> <restore num>
         to end of command.
            <restart dir> is directory where restart files are stored
                          (set in input file).
            <restore num> is the identifier of which restart file to use
                          (generally the timestep).

         example:  (to start from timestep #5)

         ./main test_inputs/test.2d.input test.2d.restart 5
         mpirun -np 2 ./main test_inputs/test.2d.input test.2d.restart 5

         NOTE:  The ordinary use of our restart functionality requires that
                a problem can only be restarted on on the same number of
                processors on which the problem was originally run.  To restart
                on a different number of processors, used the
                restart-redistribute tool in SAMRAI/tools/restart.

   There are also example input files in the subdirectory example_inputs.
      sine_front.2d.input - advecting 2d sinusoidal front in a box with 3
                            levels
      sphere.2d.input - advecting 2d sphere in a box with 3 levels
                        using UVAL_GRADIENT and UVAL_SHOCK refinement criteria
      sphere.3d.input - advecting 3d sphere in a box with 3 levels
                        using UVAL_GRADIENT and UVAL_SHOCK refinement criteria
      sphere_4levels.2d.input - advecting 2d sphere in a box with 4 levels
                                using UVAL_GRADIENT and UVAL_SHOCK refinement
                                criteria
      sphere_restart.2d.input - advecting 2d sphere in a box with 4 levels
                                using UVAL_RICHARDSON refinement criteria and
                                different values for a number of meshing and
                                tagging parameters from the file above


INPUT PARAMETER
---------------
Refer to test_inputs/test2d.input for full description of all input parameters
specific to this problem.


RESETTING BASELINES
-------------------
The tests that are run from this directory include comparisons of the results
to baseline data that represent expected results.  The tests compare the
box configuration of the hierarchy, and certain timestep floating point values,
as specified in the AutoTester input described above.  The baseline boxes
are stored in HDF data files, and the expected timestep values are listed
in the AutoTester input.

If a SAMRAI developer makes changes to the library that can legitimately change
the box configuration of a hierarchy, then the baselines here need to be reset,
according to the following steps

1. Change the AutoTester input block in each input file to include these
   two entries:
 
     write_patch_boxes = TRUE
     read_patch_boxes = FALSE

2. Comment out all of the lines that read restart files in the
   Makefile's check2d and check3d rules.

3. make check.  The baseline HDF files will be regenerated here.

4. If you get floating-point-difference errors when the "correct_result"
   values are compared, do the following

   a. set output_correct = TRUE in the AutoTester input

   b. make check

   c. Find the new values of the three floating-point outputs in the log
      file, and put them on the line "correct_result = ..."
      (make sure they don't differ too much).

5. Undo all makefile and input file changes (except for changes to
   correct_results).

6. make checktest (there should be no more errors).
