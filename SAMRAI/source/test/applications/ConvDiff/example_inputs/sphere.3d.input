/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and LICENSE. 
 *
 * Copyright:     (c) 1997-2018 Lawrence Livermore National Security, LLC
 * Description:   Advecting sphere input for SAMRAI ConvDiff example problem 
 *
 ************************************************************************/

// Refer to ../test_inputs/test2d.input for full description of all input
// parameters specific to this problem.

AutoTester {
   // No input--this is an example and does not test results.
}

ConvDiff {
   // convection-diffusion equation coefficients
   convection_coeff =  4.0e0 , 2.0e0 , 2.0e0 // vector of length dim
   diffusion_coeff   = 0.5                   // scalar
   source_coeff      = 0.0                   // scalar

   // CFL condition for timestepping
   cfl               = 0.5

   // Tolerance used for tagging cells.
   cell_tagging_tolerance = 20.0  // vector of length NEQU defined in ConvDiff.h

   // General type of problem and its initial conditions.
   data_problem      = "SPHERE"
   Initial_data {
      radius            = 2.9
      center            = 5.5, 5.5, 5.5  // vector of length dim

      val_inside     = 80.0              // vector of length NEQU defined in ConvDiff.h
      val_outside    = 10.               // vector of length NEQU defined in ConvDiff.h
   }

   // Boundary condition data following the format defined in
   // appu::CartesianBoundaryUtility[2,3]
   Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "DIRICHLET"
         val                     = 10. 
      }
      boundary_face_xhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10. 
      }
      boundary_face_ylo {
         boundary_condition      = "DIRICHLET"
         val                     = 10. 
      }
      boundary_face_yhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10. 
      }
      boundary_face_zlo {
         boundary_condition      = "DIRICHLET"
         val                     = 100. 
      }
      boundary_face_zhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10. 
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for an edge, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent face has either a FLOW
      //            or REFLECT condition, the resulting edge boundary values
      //            will be the same regardless of which face is used.

      boundary_edge_ylo_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_yhi_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_ylo_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_yhi_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_xlo_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xlo_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xhi_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xhi_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xlo_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xhi_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xlo_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xhi_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent faces have either FLOW
      //            or REFLECT conditions, the resulting node boundary values
      //            will be the same regardless of which face is used.

      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XDIRICHLET"
      }

   }

}

Main {
   // dimension of problem
   dim = 3

   // base name of log file
   base_name = "sphere.3d"

   // if true all nodes will log to individual files
   // if false only node 0 will log
   log_all_nodes    = TRUE

   // visualization dump parameters
   // frequency at which to dump viz output--zero to turn off
   viz_dump_interval    = 1
   // directory in which to place viz output
   viz_dump_dirname     = "viz_sphere3d"
   // number of processors which write to each viz file
   visit_number_procs_per_file = 1

   // restart dump parameters
   // frequency at which to dump restart output--zero to turn off
   restart_interval     = 0

}

MainRestartData{
   // maximum number of timesteps to take
   max_timesteps       = 10

   // simulation time of first timestep
   start_time          = 0.

   // simulation time of last timestep
   end_time            = 100.

   // number of timesteps between regrids
   regrid_step         = 3

   // tag buffer for each finer level
   tag_buffer          = 2
}

// Refer to geom::CartesianGeometry and its base clases for input
CartesianGeometry{
   domain_boxes	= [ (0,0,0) , (14,9,9) ]
   x_lo = 0.e0 , 0.e0 , 0.e0    // lower end of computational domain.
   x_up = 30.e0 , 20.e0 , 20.e0 // upper end of computational domain.
}

// Refer to hier::PatchHierarchy for input
PatchHierarchy {
   max_levels = 3         // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 2 , 2 , 2
      level_2 = 2 , 2 , 2
      level_3 = 2 , 2 , 2
   }

   largest_patch_size {
      level_0 = 40 , 40 , 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 9 , 9 , 9 
      // all finer levels will use same values as level_0...
   }
                                      // boxes < efficiency * vol of large box
}

// Refer to mesh::BergerRigoutsos for input
BergerRigoutsos {
   efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.95e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

// Refer to mesh::GriddingAlgorithm for input
GriddingAlgorithm{
}

// Refer to mesh::StandardTagAndInitialize for input
StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

// Refer to algs::MethodOfLinesIntegrator for input
MethodOfLinesIntegrator{
}

// Refer to mesh::TreeLoadBalancer for input
LoadBalancer {
   // using default TreeLoadBalancer configuration
}
