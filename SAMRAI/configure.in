dnl
dnl File:        $HeadURL$ 
dnl Package:     SAMRAI build system
dnl Copyright:   (c) 1997-2018 Lawrence Livermore National Security, LLC
dnl Revision:    $LastChangedRevision$
dnl Description: autoconfig configuration file
dnl

AC_INIT(COPYRIGHT)
AC_CONFIG_HEADER(include/SAMRAI/SAMRAI_config.h:config/SAMRAI_config.h.in)
dnl
dnl Autoheader stuff
AH_TOP([

#ifndef INCLUDED_SAMRAI_CONFIG_H
#define INCLUDED_SAMRAI_CONFIG_H

#define SAMRAI_VERSION_MAJOR 3
#define SAMRAI_VERSION_MINOR 12
#define SAMRAI_VERSION_PATCHLEVEL 0
])
AH_BOTTOM([

namespace SAMRAI {
   static const unsigned short MAX_DIM_VAL = SAMRAI_MAXIMUM_DIMENSION;
}

/*
 * Prevent inclusion of mpi C++ bindings in mpi.h includes.
 * This is done in here rather than SAMRAI_MPI.h since other
 * files include MPI.h, such as PETSc and hypre.
 */
#ifndef MPI_NO_CPPBIND
#define MPI_NO_CPPBIND
#endif

#ifndef MPICH_SKIP_MPICXX
#define MPICH_SKIP_MPICXX
#endif

#ifndef OMPI_SKIP_MPICXX
#define OMPI_SKIP_MPICXX
#endif

/********************************************************************/
/********************* Hardwired defines ****************************/
/********************************************************************/

/*
 * Some compilers require cmath to be included before the regular
 * C math.h and stdlib.h headers are brought in, otherwise
 * the compiler will get conflicting definitions for the functions.
 */
#if defined(__xlC__)
#define REQUIRES_CMATH 1
#endif

#define STL_SSTREAM_HEADER_FILE <sstream>
#define LACKS_STRSTREAM

/*
 * A few things for the MSVC++ version.
 */
#ifdef _MSC_VER

/*
 * Move this bad stuff to the utility class, not POSIX
 */
#define drand48() ((double)rand()/(double)RAND_MAX)
/*
 * This is not correct, the range is wrong, need to find
 * a better solution
 */
#define mrand48() (rand())

/*
 * Some IEEE stuff is not under the normal names.
 *
 */
#define isnan _isnan

#endif

#endif
])

CASC_AC_LOG_VAR(CONFIG_SHELL)

AC_CONFIG_AUX_DIR(config)

# Get system type.
AC_CANONICAL_SYSTEM
CASC_AC_LOG_VAR(target_cpu target_vendor target_os)

dnl SAMRAI has some code specific for the Solaris operating system.
dnl (This is independent of what compiler is being used).
case "$host_os" in
  solaris*)
    AC_DEFINE(HOST_OS_IS_SOLARIS,1,Define if the host system is Solaris)
esac

dnl
dnl Define the macros that will set up optional packages and features.
dnl These macros will define shell variables that will be queried later
dnl in the installation script.
dnl

AC_ARG_ENABLE([vpath],
   [AS_HELP_STRING([--enable-vpath],
      [assume a working VPATH in make (default except on IRIX64)])]
   )
AC_ARG_ENABLE([noxargs],
   [AS_HELP_STRING([--enable-noxargs],
      [don't use xargs in build])]
   )
AC_ARG_ENABLE([shared],
   [AS_HELP_STRING([--enable-shared],
      [build shared libraries (default is disabled)])]
   )
AC_ARG_ENABLE([xdr],
   [AS_HELP_STRING([--enable-xdr],
      [build with XDR libraries (default is disabled)])],
   ,
   [enable_xdr="no"]
   )
AC_ARG_ENABLE([developer_makefile],
   [AS_HELP_STRING([--enable-developer-makefile],
      [include extra targets in makefiles])],
   ,
   [enable_developer_makefile="no"]
   )
AC_ARG_ENABLE([check_assertions],
   [AS_HELP_STRING([--enable-check-assertions],
      [build with assertion checking on (default is disabled; is enabled for when debugging is enabled)])],
   [user_specified_check_assertions="yes"],
   [enable_check_assertions="no"]
   )
AC_ARG_ENABLE([check_developer_assertions],
   [AS_HELP_STRING([--enable-check-developer-assertions],
      [build with internal SAMRAI developer assertion checking on (default is disabled)])],
   [user_specified_check_developer_assertions="yes"],
   )
AC_ARG_ENABLE([check_dim_assertions],
   [AS_HELP_STRING([--enable-check-dim-assertions],
      [build with dimension assertion checking on (default is disabled; is enabled when debugging is enabled)])],
   [user_specified_check_dim_assertions="yes"],
   )
AC_ARG_ENABLE([bgl],
   [AS_HELP_STRING([--enable-bgl],
      [Identify this platform as one of the bgl family (default is disable)])],
   [enable_bgl=$enableval],
   [enable_bgl=no]
   )
AC_ARG_ENABLE([threading],
   [AS_HELP_STRING([--enable-threading],
      [build with threading on (default is disabled)])],
   ,
   [enable_threading="no"]
   )
AC_ARG_WITH([CC],
   [AS_HELP_STRING([--with-CC=ARG],[manually set C compiler to ARG])]
   )
AC_ARG_WITH([CXX],
   [AS_HELP_STRING([--with-CXX=ARG],[manually set C++ compiler to ARG])]
   )
AC_ARG_WITH([F77],
   [AS_HELP_STRING([--with-F77=ARG],[manually set F77 to ARG])]
   )
AC_ARG_WITH([M4],
   [AS_HELP_STRING([--with-M4=ARG],[manually set M4 to ARG])]
   )
AC_ARG_WITH([AR],
   [AS_HELP_STRING([--with-AR=ARG],[manually set AR to ARG])]
   )
AC_ARG_WITH([vampir],
   [AS_HELP_STRING([--with-vampir[=dir]],
      [compile with VAMPIR performance tracing])]
   )
AC_ARG_WITH([tau],
   [AS_HELP_STRING([--with-tau[=dir]],[compile with TAU performance tracing])]
   )
AC_ARG_ENABLE([deprecated],
   [AS_HELP_STRING([--enable-deprecated],
      [build with deprecated features (default is enabled)])],
   ,
   [enable_deprecated="yes"]
   )
AC_ARG_WITH([maxdim],
   [AS_HELP_STRING([--with-maxdim=ARG],
      [manually set the maximum allowed dimension (default is 3)])],
   ,
   [with_maxdim=3]
   )

dnl
dnl Set the maximum dimension for this complitation
dnl 
[validint()
{
  # validate first field. Optionally test against min value $2 and/or 
  # max value $3: if you'd rather skip these tests, send "" as values.
  # returns 1 for error, 0 for success.

  number="$1";	    min="$2";	   max="$3"

  if [ -z $number ] ; then
    return 1
  fi
  
  if [ "${number%${number#?}}" = "-" ] ; then	# first char '-' ?
    testvalue="${number#?}" 	# all but first character
  else
    testvalue="$number"
  fi
  
  nodigits="$(echo $testvalue | sed 's/[[:digit:]]//g')"
  
  if [ ! -z $nodigits ] ; then
    return 1
  fi
  
  if [ ! -z $min ] ; then
    if [ "$number" -lt "$min" ] ; then
       return 1
    fi
  fi
  if [ ! -z $max ] ; then
     if [ "$number" -gt "$max" ] ; then
       return 1
     fi
  fi
  return 0
}]

if validint "$with_maxdim" "1" ""; then
   AC_DEFINE_UNQUOTED([SAMRAI_MAXIMUM_DIMENSION], 
                      [$with_maxdim], 
                      [Maximum dimension allowed])
else
   AC_MSG_ERROR([dimension must be an integer greater than 0, not \"$with_maxdim\"])   
fi

SAMRAI_ALL_LIBRARIES="appu algs solv geom mesh math pdat xfer hier tbox"

AC_ARG_WITH([libraries],
[AS_HELP_STRING([--with-libraries=List of libraries],
   [Specify explicit list of SAMRAI libraries to build.  Default is to compile all libraries.
   This is for advanced users only. Available libraries are : appu algs solv geom mesh math pdat xfer hier tbox])],
,with_libraries='all')

if test "$with_libraries" = all; then
   SAMRAI_LIBRARIES="$SAMRAI_ALL_LIBRARIES"
else
   for j in $with_libraries
   do
      invalid_library=1
      for i in $SAMRAI_ALL_LIBRARIES
      do
         if test "$i" = "$j" 
         then
	   invalid_library=0
	   break
         fi
      done
      if test $invalid_library -eq 1
      then
	  AC_MSG_ERROR([Invalid SAMRAI library specified : $j])
      fi
   done

   SAMRAI_LIBRARIES=""
   for i in $SAMRAI_ALL_LIBRARIES
   do
      for j in $with_libraries
      do
         if test "$i" = "$j" 
         then
	   SAMRAI_LIBRARIES="$SAMRAI_LIBRARIES $i"
	   break
         fi
      done
   done
fi
AC_SUBST(SAMRAI_LIBRARIES)


dnl
dnl Since we removed the all-CAPS options and replaced them with
dnl lowercase options, some people still use the all-CAPS options
dnl and get confused with the results (despite our best efforts to
dnl document this change).  We now abort the configuration to save
dnl these poor souls from themselves.
dnl
AC_ARG_WITH(MPI,, AC_MSG_ERROR([Obsolete option for MPI used!!
You should use lower-case.  Do 'configure --help' for help.]))
AC_ARG_WITH(HDF5,, AC_MSG_ERROR([Obsolete option for HDF5 used!!
You should use lower-case.  Do 'configure --help' for help.]))
AC_ARG_WITH(PETSC,, AC_MSG_ERROR([Obsolete option for PETSC used!!
You should use lower-case.  Do 'configure --help' for help.]))


dnl
dnl Initialize common macros to empty strings
dnl

C_FLAGS="$CFLAGS"
CXX_FLAGS="$CXXFLAGS"
F77_FLAGS="$FFLAGS"
LD_FLAGS="$LDFLAGS"
CXXLD_FLAGS="$LDFLAGS"
CPP_FLAGS="$CPPFLAGS"

INC_PATH=
LIB_PATH=
LIB_NAME=-lm

dnl LIBS is not used by SAMRAI's configure.in, but it is used by some
dnl of the supporting macros.
LIBS="$LIBS -lm"

LIB_SUFFIX=.a

dnl For debugging configure:
dnl LD_LIBRARY_PATH influences the configuration tests,
dnl so we want to know what it is.
CASC_AC_LOG_VAR(LD_LIBRARY_PATH)

dnl
dnl Guess the machine architecture and set the variable ARCH
dnl

CASC_GUESS_ARCH
CASC_AC_LOG_VAR(ARCH)

dnl
dnl Set up the C++ compiler.  
dnl

if test -n "$with_CXX"; then
   CXX=$with_CXX
else
   case "$host_os" in
     linux*) CCC=" g++ ";;
     solaris*) CCC=" g++ ";;
     osf*) CCC=" g++ ";;
     *) CCC=
   esac
fi
CASC_AC_LOG_VAR(with_CXX CXX CCC, before running compiler search)
AC_PROG_CXX($CCC)
CASC_AC_LOG_VAR(with_CXX CXX CCC, after running compiler search)

dnl
dnl Set up the C compiler.  This macro must come first and be followed
dnl AC_ISC_POSIX before other compiler tests are run.  See the autoconfig
dnl manual for details.
dnl

if test -n "$with_CC"; then
   CC=$with_CC
else
   AC_PROG_CC
fi

AC_ISC_POSIX


dnl
dnl A way to manually add flags to the loader (ld) command.
dnl
AC_ARG_WITH([extra-ld-flags],
[AS_HELP_STRING([--with-extra-ld-flags=STRING],
   [Specify additional flags for the loader.])],
,with_extra_ld_flags='no')
case "$with_extra_ld_flags" in
  no)
    : No op
  ;;
  yes)
    : No op
  ;;
  *)
    LD_FLAGS="$LD_FLAGS $with_extra_ld_flags"
  ;;
esac

dnl
dnl A way to manually add flags to the c compiler command.
dnl
AC_ARG_WITH([extra-cc-flags],
[AS_HELP_STRING([--with-extra-cc-flags=STRING],
   [Specify additional flags for the c compiler.])],
,with_extra_cc_flags='no')
case "$with_extra_cc_flags" in
  no)
    : No op
  ;;
  yes)
    : No op
  ;;
  *)
    C_FLAGS="$C_FLAGS $with_extra_cc_flags"
  ;;
esac

dnl
dnl A way to manually add flags to the c++ compiler command.
dnl
AC_ARG_WITH([extra-cxx-flags],
[AS_HELP_STRING([--with-extra-cxx-flags=STRING],
   [Specify additional flags for the c++ compiler.])],
,with_extra_cxx_flags='no')
case "$with_extra_cxx_flags" in
  no)
    : No op
  ;;
  yes)
    : No op
  ;;
  *)
    CXX_FLAGS="$CXX_FLAGS $with_extra_cxx_flags"
  ;;
esac

dnl
dnl A way to manually add flags to the f77 compiler command.
dnl
AC_ARG_WITH([extra-f77-flags],
[AS_HELP_STRING([--with-extra-f77-flags=STRING],
   [Specify additional flags for the f77 compiler.])],
,with_extra_f77_flags='no')
case "$with_extra_f77_flags" in
  no)
    : No op
  ;;
  yes)
    : No op
  ;;
  *)
    F77_FLAGS="$F77_FLAGS $with_extra_f77_flags"
  ;;
esac

dnl
dnl Find ar for archiving
dnl

AC_CHECK_PROGS(AR, $with_AR ar,)
if test -z "$AR"; then
   AC_MSG_ERROR([ar archiver not found - specify with --with-AR=ARG])
fi

dnl
dnl Find m4, preferably the GNU version.
dnl

AC_CHECK_PROGS(M4, $with_M4 gm4 m4,)
if test -z "$M4"; then
   AC_MSG_ERROR([m4 preprocessor not found - specify with --with-M4=ARG])
fi


dnl
dnl Find install for installing 
dnl

AC_PROG_INSTALL
if test -z "$INSTALL"; then
   AC_MSG_ERROR([install not found])
fi

dnl
dnl Find mkdir for creating directories
dnl

AC_PROG_MKDIR_P
if test -z "$MKDIR_P"; then
   AC_MSG_ERROR([mkdir not found])
fi

dnl
dnl Determine what compilers are being used.
dnl

CASC_INFO_CC_CXX_ID
# Warn user about unsupported compilers:
case $CXX_ID in
gnu|xlc|intel) ;;
*)
  AC_MSG_WARN([
You are using a C++ compiler unsupported by SAMRAI
You are on your own!
])
  ;;
esac



dnl
dnl Check various C++ compiler features.
dnl

CASC_CXX_NAMESPACE
CASC_CXX_TEMPLATE_COMPLEX
CASC_CXX_SSTREAM
CASC_CXX_IOMANIP_LEFT
CASC_CXX_NEW_PLACEMENT_OPERATOR
CASC_CXX_MEMBER_FUNCTION_SPECIALIZATION
CASC_CXX_STATIC_DATA_INSTANTIATION
case $CXX in
   *insure*)
            ;;
   *)
            CASC_CXX_EXCEPTION_HANDLING
            ;;
esac
CASC_CXX_STANDARD_STATIC_DATA_SPECIALIZATION
if test "$casc_cv_cxx_have_standard_static_data_specialization" = "no"; then
   CASC_CXX_PRAGMA_STATIC_DATA_SPECIALIZATION
fi

CASC_CXX_CMATH

CASC_CXX_ISNAN_TEMPLATE

CASC_CXX_STD_FILL_N_RETURNS_VOID

CASC_CXX_CTIME

AC_CHECK_HEADERS([sys/times.h])
AC_CHECK_HEADERS([unistd.h])


# For insure add -Zsl option for linking
case $CXX in 
   *insure*)
            CXX_FLAGS="$CXX_FLAGS -Zsl"
            LIB_NAME="$LIB_NAME -Zsl"
            ;;
esac

case $CXX_ID in
   gnu)
      CXX_FLAGS="-Wall -Wextra -Wconversion $CXX_FLAGS"

      case $ARCH in
         IRIX64)
            CXX_FLAGS="-mabi=64 $CXX_FLAGS"
            ;;
	 solaris)
	    ;;
	 CYGWIN)
	    CXX_FLAGS="$CXX_FLAGS"
	    ;;
      esac
      ;;
   sunpro)
      CXX_FLAGS="-qrtti=all $CXX_FLAGS"
      case $ARCH in
         solaris | sun4)
            CXX_FLAGS="$CXX_FLAGS"
            CXX_FLAGS="+p $CXX_FLAGS"
            ;;
      esac
      ;;
   xlc)
      CXX_FLAGS="-qrtti -g $CXX_FLAGS"
      ;;
   intel)
      # Ignore some Intel warnings that seem harmless and very hard to get rid of 	
      CXX_FLAGS="$CXX_FLAGS -Wall -w1 -wd981 -wd383 -wd1418 -wd522"
      ;;
    insure)
      case $ARCH in
         solaris | sun4)
            CXX_FLAGS="+p $CXX_FLAGS"
            LIB_NAME="$LIB_NAME -Zsl"
            ;;
      esac
      ;;
    *)
      ;;
esac

dnl
dnl Add necessary compiler flag for threading.
dnl
if test "$enable_threading" = "yes"; then
   case $CXX_ID in
      gnu)
         CXX_FLAGS="$CXX_FLAGS -fopenmp"
         ;;
      xlc)
         CXX_FLAGS="$CXX_FLAGS -qsmp=omp"
         ;;
      intel)
         CXX_FLAGS="$CXX_FLAGS -openmp"
         ;;
      *)
         AC_MSG_WARN([
Use CFLAGS and CXXFLAGS to specify compiler
threading directive for this compiler.
]);
         ;;
   esac
   AC_DEFINE(HAVE_OPENMP,1,OPENMP is available)
fi

dnl
dnl Set the compile mode flag for the kind of target to build
dnl

XARGS="xargs -n 150"
SAMRAI_TARGET="standard"
if test "$enable_noxargs" = "yes"; then
   SAMRAI_TARGET="noxargs"
fi

if test "$enable_shared" = "yes"; then
   SAMRAI_TARGET="shared"
   case $ARCH in
   Linux | LINUX | linux )
      C_FLAGS="-fPIC $C_FLAGS"
      CXX_FLAGS="-fPIC $CXX_FLAGS"
      F77_FLAGS="-fPIC $F77_FLAGS"
      CXXLD_FLAGS="-shared $LD_FLAGS"
      LIB_SUFFIX=.so
      ;;
   rs6000)
      CXXLD_FLAGS="-G $LD_FLAGS"
      LD_FLAGS="$LD_FLAGS -binitfini:poe_remote_main"
      LIB_SUFFIX=.so
      ;;
   *)
      C_FLAGS="-KPIC $C_FLAGS"
      CXX_FLAGS="-KPIC $CXX_FLAGS"
      CXXLD_FLAGS="-shared $LD_FLAGS"
      LIB_SUFFIX=.so
      ;;
   esac
fi



dnl
dnl Set the flag indicating if extra targets
dnl should be included in the Makefile.
dnl Normally used by developers but not users.
dnl
if test "$enable_developer_makefile" = "no"; then
   DEVELOPER_MAKEFILE="no"
else
   DEVELOPER_MAKEFILE="yes"
fi
AC_SUBST(DEVELOPER_MAKEFILE)

dnl
dnl Define optimize and debug switches.
dnl By default, set no optimization switches and set -g for debug switches.
dnl

SAMRAI_MISC
SAMRAI_TIMERS
AC_ARG_ENABLE([opt],
   [AS_HELP_STRING([--enable-opt=STRING],
      [Set compiler optimization switches.])],
[case "$enable_opt" in
   no) opt_switches= ;;
   yes)
      AC_DEFINE([OPT_BUILD],[1],[Optimized build])
      case $CXX_ID in
         gnu)   opt_switches="-O2" ;;
         intel) opt_switches="-O3" ;;
         sunpro)
             case $ARCH in
                solaris | sun4) opt_switches="-fast" ;;
                *)              opt_switches="-O" ;;
             esac ;;
         xlc)   opt_switches="-O3" ;;
         *)     opt_switches="-O" ;;
      esac ;;
   *) opt_switches="$enable_opt" ;;
esac],
opt_switches=)

if test -n "$opt_switches" ; then
   C_FLAGS="$opt_switches $C_FLAGS"
   CXX_FLAGS="$opt_switches $CXX_FLAGS"
   F77_FLAGS="$opt_switches $F77_FLAGS"
fi

AC_ARG_ENABLE([debug],
[AS_HELP_STRING([--enable-debug=STRING],[Set compiler debug switches.])],
[case "$enable_debug" in
   no) debug_switches= ;;
   yes)
      case $CXX_ID in
         *)   debug_switches="-g" ;;
      esac ;;
   *) debug_switches="$enable_debug" ;;
esac
],
debug_switches=-g)

case "$enable_debug" in
   no) ;;
   *)   
   # Enable assertion checking and disable inlining when debugging is enabled if user
   # does not override.
   if test "$user_specified_check_assertions" != "yes"; then
      enable_check_assertions="yes"
   fi
   if test "$user_specified_check_dim_assertions" != "yes"; then
      enable_check_dim_assertions="yes"
   fi
   AC_DEFINE([DEBUG_INITIALIZE_UNDEFINED],[1],[Initialize new memory to undefined values in debug mode])
esac

dnl
dnl Check if compiling with assertions on
dnl
if test "$enable_check_assertions" = "yes"; then
   AC_DEFINE([DEBUG_CHECK_ASSERTIONS],[1],[Enable assertion checking])
fi


dnl
dnl Check if compiling with SAMRAI developer assertions on
dnl
if test "$enable_check_developer_assertions" = "yes"; then
   AC_DEFINE([DEBUG_CHECK_DEV_ASSERTIONS],[1],[Enable SAMRAI developer assertion checking])
fi

dnl
dnl Check if compiling with dimension assertions on
dnl
if test "$enable_check_dim_assertions" = "yes"; then
   AC_DEFINE([DEBUG_CHECK_DIM_ASSERTIONS],[1],[Enable assertion checking for dimensions])
fi

dnl
dnl Check if compiling on bgl family of machines
dnl
if test "$enable_bgl" = "yes"; then
   AC_DEFINE([__BGL_FAMILY__],[1],[Configure for compiling on BGL family of
   machines])
fi

if test -n "$debug_switches" ; then
   C_FLAGS="$debug_switches $C_FLAGS"
   CXX_FLAGS="$debug_switches $CXX_FLAGS"
   F77_FLAGS="$debug_switches $F77_FLAGS"
fi

CASC_AC_LOG_VAR(debug_switches opt_switches)

dnl
dnl Set the optional classes to build
dnl

dnl
dnl Set up the Fortran compiler.
dnl

if test -n "$with_F77"; then
   F77=$with_F77
else
   if test -z "$F77"; then
      AC_CHECK_PROGS(F77, f77 g77 xlf f2c)
   else
      dnl If F77 was specified then see if it is a full path
      dnl or just the prog name in users PATH
      if test -f $F77; then
	F77=$F77
      else
	AC_CHECK_PROGS(F77, $F77)
      fi
   fi
fi

test -z "$F77" && AC_MSG_ERROR([no acceptable Fortran found in $PATH])
CASC_AC_LOG_VAR(F77)

if test "$ac_cv_prog_g77" = "yes"; then
   F77_FLAGS="-Wall -Wimplicit -Wunused $F77_FLAGS"
else
   case $ARCH in
      sun4 | solaris)
         F77_FLAGS="-u $F77_FLAGS"
         ;;
      rs6000)
         F77_FLAGS="-u $F77_FLAGS"
         ;;
      IRIX64)
         F77_FLAGS="-64 $F77_FLAGS"
         ;;
   esac
fi

dnl dnl
dnl dnl Set up the Fortran libraries.
dnl dnl
AC_F77_LIBRARY_LDFLAGS
SAMRAI_SPLIT_LIBS_STRING(FLIBS,FLIBS_PATH,FLIBS_NAME)
LIB_NAME="${LIB_NAME} ${FLIBS_NAME}"
LIB_PATH="${LIB_PATH} ${FLIBS_PATH}"
CASC_AC_LOG_VAR([FLIBS FLIBS_PATH FLIBS_NAME], [after using ac_f77_library_ldflags])

dnl
dnl Find the correct way to mangle fortran function names
dnl so they can be called from C.  Calling this macro puts
dnl certain #define statements in the config.h file to choose
dnl the correct mangling.
dnl A fortran subroutine named dothis can be called from C using
dnl    F77_FUNC(dothis,DOTHIS)
dnl A fortran subroutine named do_this can be called from C using
dnl    F77_FUNC_(do_this,DO_THIS)
dnl
AC_F77_WRAPPERS

dnl
dnl When user specifies, override the results from AC_F77_WRAPPERS.
dnl This is a total kludge for fixing a problem on Purple.
dnl It corrects the results of the name mangling test in
dnl AC_F77_WRAPPERS, where the mangling results differs
dnl depending on whether direct compiles or with intervening
dnl library (.a) file.  This is a total kludge!!!! but it's
dnl too hard to improve the test or fix the strange behavior.
dnl
AC_MSG_CHECKING(whether to kludge override fortran name mangling results)
AC_ARG_ENABLE([fortran-mangling-override],
[AS_HELP_STRING([--enable-fortran-mangling-override],
          [Kludgey FORTRAN name mangling fix.  Not for general use.])],
[case "$enable_fortran_mangling_override" in
  [yes)]
  AC_MSG_RESULT(yes)
  sed -e ['s/^\(#define F77_FUNC.\{1,\}\)/\1 ## _/'] confdefs.h > confdefs1.h
  mv confdefs1.h confdefs.h
esac],
AC_MSG_RESULT(no))

dnl
dnl Rename the F77_FUNC macros SAMRAI_F77_FUNC to avoid conflicts
dnl with client code using a different version of AC_F77_WRAPPERS.
dnl
sed 's/F77_FUNC/SAMRAI_F77_FUNC/' confdefs.h > confdefs1.h
mv confdefs1.h confdefs.h

dnl
dnl Find the X11 include directory, library directory, and associated
dnl libraries.
dnl

if test "${with_x+set}" = set; then
   AC_PATH_XTRA
   if test "yes" = "$no_x"; then
      AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the X11 library])
      AC_DEFINE([LACKS_X11],[1],[X11 library is missing])
   else
      AC_DEFINE([HAVE_X11],[1],[X11 library is present])
      if test -n "$x_includes"; then
         INC_PATH="-I$x_includes $INC_PATH"
      fi
      # This is a hack, SAMRAI adds the shared library syntax later
      X_LIBS=`echo $X_LIBS | sed 's/-R\//-L\//'`
      x11_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
      SAMRAI_SPLIT_LIBS_STRING(x11_LIBS,x11_LIB_PATH,x11_LIB_NAME)
      LIB_PATH="$x11_LIB_PATH $LIB_PATH"
      LIB_NAME="$x11_LIB_NAME $LIB_NAME"
   fi
else
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the X11 library])
   AC_DEFINE([LACKS_X11],[1],[X11 library is missing])
fi

dnl
dnl If vpath is working then we don't need to include SRCDIR
dnl in the compiler invocation targets.  By default, we assume
dnl that vpath works properly (except on IRIX64).  If this is
dnl not the case, then the user must specify --disable-vpath
dnl in the configuration.
dnl

case $ARCH in
   IRIX64)
      if test -z "$enable_vpath"; then
         enable_vpath=no
      fi
      ;;
   *)
      if test -z "$enable_vpath"; then
         enable_vpath=yes
      fi
      ;;
esac

if test "$enable_vpath" = "no"; then
   SRCDIR_COMPILE_PREFIX="\$(SRCDIR)/"
else
   SRCDIR_COMPILE_PREFIX=""
fi


dnl
dnl Valgrind
dnl 
CASC_SUPPORT_VALGRIND
AC_SUBST(valgrind_EXE)

dnl
dnl Set DOXYGEN_BIN to the doxygen binary.
dnl

CASC_PATH_PROG(DOXYGEN_BIN,doxygen)
CASC_AC_LOG_VAR(DOXYGEN_BIN)

dnl
dnl Set DOT_PATH to the directory of the dot binary, for use with doxygen.
dnl

AC_ARG_WITH([dot-dir],
[AS_HELP_STRING([--with-dot-dir=DIR],
   [Specify bin directory where dot binaries live.])],,
unset with_dot_dir)
if   test "${with_dot_dir}" = yes || test ! "${with_dot_dir+set}" = set; then
  # Find dot path, and use if found
  DOT_PATH=`which dot >& /dev/null`
  if test -z "${DOT_PATH}"; then
    unset DOT_PATH
    HAVE_DOT=NO
  else
    [DOT_PATH=`echo $DOT_PATH | sed 's!/[^/]\{1,\}$!!']`
    HAVE_DOT=YES
  fi
elif test "${with_dot_dir}" = no; then
  # Disable dot.
  unset DOT_PATH
  HAVE_DOT=NO
else
  # Make sure valid path is specified.  Enable dot.
  if test ! -d ${with_dot_dir}; then
     AC_MSG_WARN([
Invalid path given for dot executable: ${with_dot_dir}.
Path does not exist.
You can expect doxygen documentation generation to not work properly.
]);
  fi
  DOT_PATH=${with_dot_dir}
  HAVE_DOT=YES
fi
CASC_AC_LOG_VAR(with_dot_dir HAVE_DOT DOT_PATH)
AC_SUBST(HAVE_DOT)
AC_SUBST(DOT_PATH)

dnl CASC_PATH_PROG(DOT_BIN,dot)
dnl CASC_AC_LOG_VAR(DOT_BIN)
dnl AC_SUBST(DOT_BIN)
dnl # Doxygen wants to know if we have the dot binary.
dnl HAVE_DOT=NO;  test "${DOT_BIN+set}" = set && HAVE_DOT=YES
dnl AC_SUBST(HAVE_DOT)

dnl
dnl Set the directory for doxygen documentation.
dnl
AC_ARG_WITH([dox-output-dir],
[AS_HELP_STRING([--with-dox-output-dir=DIR],
   [Specify full where Doxygen documentation is generated.  Default is the docs
   directory in the compile tree.])])
if test -n "$with_dox_output_dir"; then
  if echo "$with_dox_output_dir" | grep -v '^/' ; then
    AC_MSG_ERROR(You must give a full path with --with-dox-output-dir=DIR)
  fi
  dox_output_dir="$with_dox_output_dir"
  # Make sure dox_output_dir ends with / so because the doxygen
  # configuration files simply append a subdirectory name.
  [dox_output_dir="`echo $dox_output_dir | sed 's:\([^/]\)$:\1/:'`"]
fi
AC_SUBST(dox_output_dir)

dnl
dnl Set SAMRAI_PERL to the perl binary for use in doxygen.
dnl

CASC_PATH_PROG(SAMRAI_PERL,perl)
CASC_AC_LOG_VAR(SAMRAI_PERL)

dnl
dnl Whether restrict key word works.
dnl
CASC_AC_LOG(begin stringize)
AC_C_STRINGIZE
CASC_AC_LOG(end stringize)

dnl
dnl Whether restrict key word works.
dnl
CASC_C_RESTRICT

dnl
dnl Look for the iomanip header file name.
dnl
CASC_IOMANIP_HEADER_FILENAME

dnl
dnl Look for the iostream header file name.
dnl
CASC_IOSTREAM_HEADER_FILENAME

dnl
dnl Look for the strstream header file name.
dnl
CASC_STL_SSTREAM_HEADER_FILENAME
dnl
dnl Deal with broken ostringstream type.
dnl Some platforms have ostringstream and some ostrstream.
dnl We need to know which is broken.
dnl
AC_LANG_PUSH([C++])
AC_MSG_CHECKING(type ostringstream)
AC_TRY_COMPILE([#include STL_SSTREAM_HEADER_FILE
using namespace std;
], [ostringstream oss; oss << 10;]
,
AC_MSG_RESULT(ok),
AC_MSG_RESULT(broken)
AC_DEFINE(OSTRINGSTREAM_TYPE_IS_BROKEN,1,The type ostringstream is broken)
)
AC_MSG_CHECKING(type ostrstream)
AC_TRY_COMPILE([#include STL_SSTREAM_HEADER_FILE
using namespace std;
], [ostrstream oss; oss << 10;]
,
AC_MSG_RESULT(ok),
AC_MSG_RESULT(broken)
AC_DEFINE(OSTRSTREAM_TYPE_IS_BROKEN,1,The type ostrstream is broken)
)
AC_LANG_POP([C++])

dnl
dnl Check if malloc.h is present
dnl
AC_CHECK_HEADER(malloc.h,
        AC_DEFINE([HAVE_MALLOC_H],[1],[HAVE_MALLOC_H])
        )

dnl
dnl Checking for mallinfo
dnl
AC_MSG_CHECKING(for mallinfo)
AC_TRY_COMPILE([#include <malloc.h>], void *x=mallinfo,
  AC_DEFINE(HAVE_MALLINFO, 1, Define if you have the 'mallinfo' function.)
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
)

CASC_CXX_ISNAN

dnl
dnl Set dl library on Linux.
dnl Linux has a dynamic load library, and some software (PETSc-2.1.3
dnl for example) require it.  When configuring on Linux, if the
dnl dl library is found, use it.
dnl

CASC_SUPPORT_DL(1)
if test "${dl_PREFIX+set}" = set; then
  if echo $target_os | grep '^linux' > /dev/null \
    && test ! "${dl_LIBS+set}" = set; then
    AC_MSG_WARN([
	The Linux dynamic loading library is not found.
	This may cause problems with some libraries that use it.
	In particular, we have seen that PETSc may use this library.
    ])
  fi
  if test "${dl_LIBS}"; then
    LIBS="$dl_LIBS $LIBS"
    SAMRAI_SPLIT_LIBS_STRING(dl_LIBS,dl_LIB_PATH,dl_LIB_NAME)
    LIB_PATH="$dl_LIB_PATH $LIB_PATH"
    LIB_NAME="$dl_LIB_NAME $LIB_NAME"
    INC_PATH="$dl_INCLUDES $INC_PATH"
  fi
fi



dnl dnl
dnl dnl Set up the Fortran libraries.
dnl dnl
dnl AC_F77_LIBRARY_LDFLAGS
dnl SAMRAI_SPLIT_LIBS_STRING(FLIBS,FLIBS_PATH,FLIBS_NAME)
dnl LIB_NAME="${LIB_NAME} ${FLIBS_NAME}"
dnl LIB_PATH="${LIB_PATH} ${FLIBS_PATH}"
dnl CASC_AC_LOG_VAR([FLIBS FLIBS_PATH FLIBS_NAME], [after using ac_f77_library_ldflags])
dnl dnl
dnl dnl Set fortran library.
dnl dnl
dnl CASC_AC_LOG_VAR(fortran_LIBS fortran_LIB_PATH fortran_LIB_NAME LIB_PATH LIB_NAME, before getting fortran libs)
dnl CASC_SUPPORT_FORTRAN_FROM_C(1)
dnl if test -n "$fortran_LIBS" ; then
dnl   LIBS="$LIBS $fortran_LIBS"
dnl   SAMRAI_SPLIT_LIBS_STRING(fortran_LIBS,fortran_LIB_PATH,fortran_LIB_NAME)
dnl   LIB_PATH="$fortran_LIB_PATH $LIB_PATH"
dnl   LIB_NAME="$fortran_LIB_NAME $LIB_NAME"
dnl fi
dnl CASC_AC_LOG_VAR(fortran_LIBS fortran_LIB_PATH fortran_LIB_NAME LIB_PATH LIB_NAME, after getting fortran libs)


dnl
dnl If the nsl library can be found, use it.
dnl

CASC_SUPPORT_NSL(1)
if test "${nsl_PREFIX+set}" = set; then
  LIBS="$nsl_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(nsl_LIBS,nsl_LIB_PATH,nsl_LIB_NAME)
  LIB_PATH="$nsl_LIB_PATH $LIB_PATH"
  LIB_NAME="$nsl_LIB_NAME $LIB_NAME"
  INC_PATH="$nsl_INCLUDES $INC_PATH"
fi

dnl
dnl Set variables for blas support
dnl
CASC_SUPPORT_BLAS
if test "${blas_PREFIX+set}" = set ||
   test "${blas_INCLUDES+set}" = set ||
   test "${blas_LIBS+set}" = set ; then
  SAMRAI_SPLIT_LIBS_STRING(blas_LIBS,blas_LIB_PATH,blas_LIB_NAME)
  LIB_PATH="$blas_LIB_PATH $LIB_PATH"
  LIB_NAME="$blas_LIB_NAME $LIB_NAME"
  INC_PATH="$blas_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_BLAS,1,BLAS library is available so use it)
fi
CASC_AC_LOG_VAR(blas_LIB_PATH blas_LIB_NAME LIB_PATH LIB_NAME)

dnl
dnl Set variables for lapack support
dnl
CASC_SUPPORT_LAPACK
if test "${lapack_PREFIX+set}" = set ||
   test "${lapack_INCLUDES+set}" = set ||
   test "${lapack_LIBS+set}" = set ; then
  SAMRAI_SPLIT_LIBS_STRING(lapack_LIBS,lapack_LIB_PATH,lapack_LIB_NAME)
  LIB_PATH="$lapack_LIB_PATH $LIB_PATH"
  LIB_NAME="$lapack_LIB_NAME $LIB_NAME"
  INC_PATH="$lapack_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_LAPACK,1,LAPACK library is available so use it)
fi
CASC_AC_LOG_VAR(lapack_LIB_PATH lapack_LIB_NAME LIB_PATH LIB_NAME)

dnl
dnl If MPI is requested, then determine the proper path using CASC_FIND_MPI.
dnl Note:  I added CASC_FIND_MPI_ALPHA for special case with compass cluster.
dnl For more information, see code comments for macro in casc_mpi.m4.  AMW 9/00
dnl

AC_ARG_WITH([mpi],
   [AS_HELP_STRING([--without-mpi],[Compile without MPI library.])])
if test "$with_mpi" = no; then
   if test -z "`echo $CXX:t | grep mpi`" ; then
      AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the MPI library])
      AC_DEFINE([LACKS_MPI],[1],[MPI library is missing])
   else
      AC_MSG_ERROR([You have specified a non-mpi build but are using an mpi compiler wrapper with is contradictory.])
   fi
else

   if test -z "`echo $CXX:t | grep mpi`" ; then
      case $ARCH in
         alpha)
            CASC_FIND_MPI_ALPHA
         ;;
         *)
            CASC_FIND_MPI
         ;;
      esac

      if test -n "$MPIINCLUDE" -o -n "$MPILIBS" -o -n "$MPILIBDIRS"; then
         with_mpi=yes
         AC_DEFINE([HAVE_MPI],[1],[MPI library is present])
         INC_PATH="$MPIINCLUDE $INC_PATH"
         LIB_NAME="$MPILIBS $LIB_NAME"
         LIB_PATH="$MPILIBDIRS $LIB_PATH"
         CASC_AC_LOG_VAR(MPIINCLUDE MPILIBS MPILIBDIRS, After successfully finding MPI using casc_find_mpi)
         CONFIGURED_WITH_MPI="with_mpi"
         AC_SUBST(CONFIGURED_WITH_MPI)
      fi
   else
      with_mpi=yes
      AC_DEFINE([HAVE_MPI],[1],[MPI library is present])
      CONFIGURED_WITH_MPI="with_mpi"
      AC_SUBST(CONFIGURED_WITH_MPI)
   fi
fi
CASC_AC_LOG_VAR(with_mpi)

dnl
dnl Support linking with Z lib if HDF requires it
dnl
CHECK_ZLIB()
SAMRAI_SPLIT_LIBS_STRING(zlib_LIBS,zlib_LIB_PATH,zlib_LIB_NAME)
LIB_PATH="$zlib_LIB_PATH $LIB_PATH"
LIB_NAME="$zlib_LIB_NAME $LIB_NAME"
INC_PATH="$zlib_INCLUDES $INC_PATH"

dnl
dnl Support linking with SZ lib if HDF requires it
dnl
CHECK_SZLIB()
SAMRAI_SPLIT_LIBS_STRING(szlib_LIBS,szlib_LIB_PATH,szlib_LIB_NAME)
LIB_PATH="$szlib_LIB_PATH $LIB_PATH"
LIB_NAME="$szlib_LIB_NAME $LIB_NAME"
INC_PATH="$szlib_INCLUDES $INC_PATH"

dnl
dnl Set variables for hdf5 support
dnl
CASC_SUPPORT_HDF5
if test "${hdf5_PREFIX+set}" = set; then
  SAMRAI_SPLIT_LIBS_STRING(hdf5_LIBS,hdf5_LIB_PATH,hdf5_LIB_NAME)
  LIB_PATH="$hdf5_LIB_PATH $LIB_PATH"
  LIB_NAME="$hdf5_LIB_NAME $LIB_NAME"
  INC_PATH="$hdf5_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_HDF5,1,HDF5 library is available so use it)
else
  if test ! "$with_hdf5" = no; then
   AC_MSG_ERROR([HDF5 not found - either specify a valid location via --with-hdf5=PATH or if you do not have HDF5 use --without-hdf5.  Note: if you do not have HDF5 you will not be able to use SAMRAI's VisIt Data writer and the VisIt visualization package.])
  fi
fi
CASC_AC_LOG_VAR(
[hdf5_INCLUDES INC_PATH hdf5_LIB_PATH hdf5_LIB_NAME LIB_PATH LIB_NAME])

# Defines ptscotch_PREFIX ptscotch_INCLUDES and ptscotch_LIBS.
AC_ARG_WITH(ptscotch,
[  --with-ptscotch[=PATH]  Use PT-SCOTCH and specify where PT-SCOTCH is installed.],
, with_ptscotch=no)

case "$with_ptscotch" in
  no)
    : Do nothing
  ;;
  yes)
    # PT-SCOTCH install path was not specified.
    # Look in a couple of standard locations to probe if
    # PT-SCOTCH header files are there.
    AC_MSG_CHECKING([for PT-SCOTCH installation])
    for dir in /usr /usr/local; do
      if test -f ${dir}/ptscotch/include/ptscotch.h; then
        ptscotch_PREFIX=${dir}
        break
      fi
    done
    AC_MSG_RESULT([$ptscotch_PREFIX])
  ;;
  *)
    # PT-SCOTCH install path was specified.
    AC_MSG_CHECKING([for PT-SCOTCH installation])

    if test -f ${with_ptscotch}/include/ptscotch.h; then
        ptscotch_PREFIX=$with_ptscotch
        ptscotch_INCLUDES="-I${ptscotch_PREFIX}/include"
        ptscotch_LIBS="-L${ptscotch_PREFIX}/lib -lptscotch -lptscotcherr -lscotch -lscotcherr"
        AC_MSG_RESULT([$ptscotch_PREFIX])
    else
        AC_MSG_RESULT([$ptscotch_PREFIX])
        AC_MSG_ERROR([PT-SCOTCH not found in $with_ptscotch])
    fi
  ;;
esac
if test "${ptscotch_PREFIX+set}" = set; then
   SAMRAI_SPLIT_LIBS_STRING(ptscotch_LIBS,ptscotch_LIB_PATH,ptscotch_LIB_NAME)
   LIB_PATH="$ptscotch_LIB_PATH $LIB_PATH"
   LIB_NAME="$ptscotch_LIB_NAME $LIB_NAME"
   INC_PATH="$ptscotch_INCLUDES $INC_PATH"
   AC_DEFINE([HAVE_PTSCOTCH],[1],[PTSCOTCH headers are available to use])
fi
CASC_AC_LOG_VAR(
[ptscotch_INCLUDES INC_PATH ptscotch_LIBS LIB_PATH LIB_NAME])dnl


dnl
dnl Thread Building Blocks support
dnl
SAMRAI_SUPPORT_TBB
if test -n "$TBBINCLUDE" -o -n "$TBBLIBS" -o -n "$TBBLIBDIRS"; then
   with_tbb=yes
   AC_DEFINE([HAVE_TBB],[1],[Thread Building Blocks are available to use])
   INC_PATH="$TBBINCLUDE $INC_PATH"
   LIB_NAME="$TBBLIBS $LIB_NAME"
   LIB_PATH="$TBBLIBDIRS $LIB_PATH"
   CASC_AC_LOG_VAR([TBBINCLUDE TBBLIBS TBBLIBDIRS])dnl
fi
CASC_AC_LOG_VAR(with_tbb)

dnl
dnl Silo support
dnl
CASC_SUPPORT_SILO
if test "${silo_PREFIX+set}" = set; then
  SAMRAI_SPLIT_LIBS_STRING(silo_LIBS,silo_LIB_PATH,silo_LIB_NAME)
  LIB_PATH="$silo_LIB_PATH $LIB_PATH"
  LIB_NAME="$silo_LIB_NAME $LIB_NAME"
  INC_PATH="$silo_INCLUDES $INC_PATH"
  AC_DEFINE([HAVE_SILO],[1],[SILO library is available so use it])
fi
CASC_AC_LOG_VAR(
[silo_INCLUDES INC_PATH silo_LIB_PATH silo_LIB_NAME LIB_PATH LIB_NAME])

dnl
dnl Set variables for hypre support.
dnl
CASC_SUPPORT_HYPRE
if test "${hypre_PREFIX+set}" = set; then
  SAMRAI_SPLIT_LIBS_STRING(hypre_LIBS,hypre_LIB_PATH,hypre_LIB_NAME)
  LIB_PATH="$hypre_LIB_PATH $LIB_PATH"
  LIB_NAME="$hypre_LIB_NAME $LIB_NAME"
  INC_PATH="$hypre_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_HYPRE,1,HYPRE library is available so use it)
  AC_MSG_CHECKING(whether HYPRE was compiled with MPI)
  # Check how HYPRe was compiled.
  CASC_AC_LOG_VAR(hypre_PARALLELISM)
  if test "$hypre_PARALLELISM" = 'parallel'; then
     AC_MSG_RESULT(yes)
     if test "$with_mpi" = no ; then
        AC_MSG_ERROR(sequential SAMRAI cannot call parallel HYPRE)
     fi
  elif test "$hypre_PARALLELISM" = 'serial'; then
     AC_MSG_RESULT(no)
     AC_DEFINE([HYPRE_SEQUENTIAL],[1],[Hypre library is configured for sequential mode])
     if test "$with_mpi" != no ; then
        AC_MSG_ERROR(parallel SAMRAI cannot call sequential HYPRE)
     fi
  else
     AC_MSG_WARN(Cannot determine if hypre was compiled for serial or parallel)
  fi
else
  AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the HYPRE library])
  AC_DEFINE([LACKS_HYPRE],[1],[Hypre library is missing])
fi

dnl
dnl Set variables for superlu support.
dnl
AC_ARG_WITH([superlu-lib],
[AS_HELP_STRING([--with-superlu-lib=LIB],
   [LIB is the library archive file for the SuperLU package.])],
,with_superlu_lib='no')

if test "${with_superlu_lib}" = yes; then
  superlu_LIB=
elif test "${with_superlu_lib}" = no; then
  superlu_LIB=
else
  superlu_LIB="${with_superlu_lib}"
fi
LIB_NAME="$superlu_LIB $LIB_NAME"

dnl
dnl Set variables for spooles support.
dnl
CASC_SUPPORT_SPOOLES
if test "${spooles_PREFIX+set}" = set; then
  SAMRAI_SPLIT_LIBS_STRING(spooles_LIBS,spooles_LIB_PATH,spooles_LIB_NAME)
  LIB_PATH="$spooles_LIB_PATH $LIB_PATH"
  LIB_NAME="$spooles_LIB_NAME $LIB_NAME"
  INC_PATH="$spooles_INCLUDES $INC_PATH"
fi

dnl
dnl Set variables for petsc support.
dnl
CASC_SUPPORT_PETSC
if test "${PETSC_DIR+set}" = set; then
  SAMRAI_SPLIT_LIBS_STRING(petsc_LIBS,petsc_LIB_PATH,petsc_LIB_NAME)
  LIB_PATH="$petsc_LIB_PATH $LIB_PATH"
  LIB_NAME="$petsc_LIB_NAME $LIB_NAME"
  INC_PATH="$petsc_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_PETSC,1,PETSC library is available so use it)
  if test $PETSC_VERSION_MAJOR -ne 3 || \
     test $PETSC_VERSION_MINOR -ne 2 || \
     test $PETSC_VERSION_SUBMINOR -ne 0 ; then
     AC_MSG_WARN([
SAMRAI requires PETSc-3.2.0.  You have specified version $PETSC_VERSION_MAJOR.$PETSC_VERSION_MINOR.$PETSC_VERSION_SUBMINOR
which may not work properly!
])
  fi
fi

dnl
dnl The following are hacks for specific architectures.  We are not proud
dnl of these tests, and they should be changed to macros in the future.
dnl
dnl Check for broken XDR headers on linux and CYGWIN systems.
dnl AIX requires both _ALL_SOURCE and _POWER for some system files.
dnl

case $ARCH in
   Linux | LINUX | linux | CYGWIN )
      AC_DEFINE([LACKS_PROPER_XDR_HEADER],[1],[LACKS_PROPER_XDR_HEADER])
      ;;
   rs6000)
      dnl
      dnl Defining ALL_SOURCE causes ASC Purple mpxlC and mpCC
      dnl to complain that it is already defined as something else.
      dnl I don't why it is required.  --BTNG
      dnl AC_DEFINE([_ALL_SOURCE],[1],[Kludgey thing inserted by configure.in])
      dnl
      AC_DEFINE([_POWER],[1],[Kludgey thing inserted by configure.in])
      ;;
   *)
      ;;
esac

dnl
dnl Test if compiling with XDR support
dnl
if test "$enable_xdr" = "yes"; then

   AC_DEFINE(HAVE_XDR,1,"Compiling with XDR support")

   dnl
   dnl For cygwin need to add rpc libraries to get XDR.
   dnl

   case $ARCH in
      CYGWIN)
         case $CXX in
            *g++)
	       LIB_NAME="$LIB_NAME -lrpc"
              ;;
         esac
         ;;
   esac
fi

dnl
dnl Test if compiling with deprecated 
dnl
if test "$enable_deprecated" = "yes"; then
   AC_DEFINE(INCLUDE_DEPRECATED,2,"Compiling with deprecated features")
else
   AC_DEFINE(INCLUDE_DEPRECATED,9999999,"Compiling without deprecated features")
fi

dnl
dnl If Sundials is requested, then set up the Sundials libraries and include paths.
dnl

AC_ARG_WITH([sundials],
[AS_HELP_STRING([--with-sundials=PATH],
   [Use the Sundials solver package and specify where it is.])],
,with_sundials='no')

if test "$with_sundials" = no; then
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the Sundials library])
   AC_DEFINE([LACKS_SUNDIALS],[1],[LACKS_SUNDIALS])
else
   sundials_dir="$with_sundials"
   if test ! -d "$sundials_dir" ; then
     AC_MSG_ERROR(
       [You MUST specify an existing path when using --with-sundials=PATH])
   fi
   AC_DEFINE([HAVE_SUNDIALS],[1],[HAVE_SUNDIALS])
   LIB_PATH="$LIB_PATH -L$sundials_dir/lib"
   LIB_NAME="$LIB_NAME -lsundials_cvode -lsundials_kinsol"
   INC_PATH="-I$sundials_dir/include $INC_PATH"
fi
AC_SUBST(SUNDIALS_C_FILES)

CASC_AC_LOG_VAR(with_sundials sundials_dir)

dnl
dnl If VAMPIR is requested, then set up the VAMPIR libraries and include paths.
dnl
if test -z "$with_vampir"; then
   AC_DEFINE([LACKS_VAMPIR],[1],[LACKS_VAMPIR])
else
   if test "$with_vampir" = yes; then
      AC_MSG_CHECKING(for VAMPIR)
      vampir_dir=
      for i in /usr/global/tools/kppp/aix_5_ll/default $with_vampir; do
         if test -d $i -a -f $i/include/VT.h; then
            vampir_dir=$i
            break
         fi
      done
   else
      vampir_dir=$with_vampir
   fi

   if test -n "$vampir_dir"; then
      AC_MSG_RESULT($vampir_dir)
      AC_DEFINE([HAVE_VAMPIR],[1],[HAVE_VAMPIR])
      with_vampir=yes

      INC_PATH="-I$vampir_dir/include $INC_PATH"
      LIB_PATH="-L$vampir_dir/lib $LIB_PATH"

      case $ARCH in
         alpha)
            LIB_NAME="-lVT -lpmpi -lmld -lpthread -lm $LIB_NAME"
            ;;
         rs6000)
            LIB_NAME="-lVT -lld -lm $LIB_NAME"
            ;;
         *)
            ;;
      esac
   else
      AC_MSG_RESULT(VAMPIR library not found)
      AC_DEFINE([LACKS_VAMPIR],[1],[LACKS_VAMPIR])
      with_vampir=no
   fi
fi
CASC_AC_LOG_VAR( with_vampir vampir_dir )

dnl
dnl If TAU is requested, setup the TAU included makefile, libraries,
dnl and include paths.
dnl
if test -z "$with_tau"; then
   AC_DEFINE([LACKS_TAU],[1],[LACKS_TAU])
else
   AC_MSG_CHECKING(for TAU)
   AC_MSG_RESULT($with_tau)
   AC_DEFINE([HAVE_TAU],[1],[HAVE_TAU])
   TAU_INCLUDE="$with_tau"
   INC_PATH="\$(TAU_INCLUDE) \$(TAU_DEFS) \$(TAU_MPI_INCLUDE) $INC_PATH"
   case $ARCH in
      Linux | LINUX | linux )
         INC_PATH="$INC_PATH"
         ;;
   esac
   LIB_NAME="\$(TAU_MPI_LIBS) \$(TAU_LIBS) $LIB_NAME"
   AC_MSG_RESULT(including TAU makefile $TAU_INCLUDE)
   TAU_INCLUDE="include $TAU_INCLUDE"
fi


dnl
dnl Determine which IEEE-specified C macros are broken.
dnl
CASC_C_IEEE_FLOAT


# If on the alpha, and the ots library exists, use it.
# Libots is the Compiled Code Support Library used by Compaq.
if echo "$host_cpu" | grep '^alpha' > /dev/null; then
  for i in '' /usr /usr/local; do
    if test -r "$i/lib/libots.a" || test -r "$i/lib/libots.so"; then
      LIBS="$LIBS -lots"
      LIB_NAME="$LIB_NAME -lots"
      break
    fi
  done
fi


dnl
dnl Generate the installation directory for the SAMRAI libraries.  The
dnl installation location is given by $prefix/ARCH-CXX-DEBUG, which ARCH
dnl is the architecture name returned by tarch, CXX is the basename of the
dnl compiler, and DEBUG is the debug status (debug, optdebug, or opt).
dnl

debug_ext=debug
if test "$enable_opt" = "yes"; then
   if test "$enable_debug" = "yes"; then
      debug_ext=optdebug
   else
      debug_ext=opt
   fi
fi

if test "$prefix" = "NONE"; then
   dir_place_holder=`pwd`
   cd $srcdir/..
   prefix=`pwd`
   cd $dir_place_holder
fi

INSTDIR=$prefix


dnl
dnl Support rpath syntax by adding it to the LIB_PATH variable.
dnl
CASC_AC_LOG_VAR(LIB_PATH, before adding rpath syntax)
CASC_LIBS_ADD_RPATH(LIB_PATH,LIB_PATH,1)
CASC_AC_LOG_VAR(LIB_PATH, after adding rpath syntax)


dnl
dnl Support a generalized way to run serial and parallel programs.
dnl This generates a file 'serpa-run' in the config directory.
dnl Use serpa-run version modified by SAMRAI.
dnl
SAMRAI_SERPA(config/serpa-run)
AC_CONFIG_FILES( config/serpa-run, chmod +x config/serpa-run )



dnl
dnl Specify how many processors to use in testing.
dnl
case $CONFIGURED_WITH_MPI in
  with_mpi)
    TEST_NPROCS='1,2,4'
  ;;
  *)
    TEST_NPROCS='0'
  ;;
esac
AC_SUBST(TEST_NPROCS)



dnl
dnl Make all of the macro substitutions for the generated output files
dnl

AC_SUBST(ARCH)
AC_SUBST(INSTDIR)

AC_SUBST(SAMRAI_TARGET)

AC_SUBST(TAU_INCLUDE)

AC_SUBST(M4)
AC_SUBST(AR)
AC_SUBST(XARGS)

AC_SUBST(F77)
AC_SUBST(F77_FLAGS)

AC_SUBST(CC)
AC_SUBST(C_FLAGS)

AC_SUBST(CXX)
AC_SUBST(CXX_FLAGS)
AC_SUBST(CPPFLAGS_EXTRA)

AC_SUBST(F77LIBFLAGS)

AC_SUBST(LD_FLAGS)
AC_SUBST(CXXLD_FLAGS)

AC_SUBST(LIB_SUFFIX)

AC_SUBST(SRCDIR_COMPILE_PREFIX)
AC_SUBST(INC_PATH)
AC_SUBST(LIB_PATH)
AC_SUBST(LIB_NAME)
AC_SUBST(ac_pwd)
AC_SUBST(btng_rpath_beginning)

dnl Define a macro that links files from the compile tree to the source tree.
dnl The links have the same name as the the target.  Nothing is done if 
dnl compiling in the source directory.
dnl 
dnl Note: It would be "nicer" to have the some of the processing done below 
dnl moved into this function but it didn't seem to work.
AC_DEFUN([SAMRAI_LINK_FILES],[
dnl This macro links files the way SAMRAI wants them linked.
dnl arg1: list of file paths (relative to top) to be linked.
test `pwd` = `cd "$srcdir" && pwd` && link_prefix='.unneeded_link.'
AC_CONFIG_LINKS(
esyscmd(echo "$1" | sed ['s|^\([ 	]\{0,\}\)\([^ 	]\{1,\}/\)\([^/ 	]\{1,\}\)\([ 	\n]\{0,\}\)$|\2\${link_prefix}\3:\2\3|g'])
,,[
# Commands before creating links.
link_prefix="${link_prefix}"
])dnl End call to AC_CONFIG_LINKS
])dnl End definition of SAMRAI_LINK_FILES

# Link files for examples directory.
dnl Define standard exclude patterns so the find commands we use during
dnl autoconf does not catch files that are not intended to be a part of the library.
define(samrai_find_excludes,['!' '(' -path '*/CVS/*' -o -path '*/.svn/*' -o -name '*~' -o -name '#*#' \
-o -name '*.bak' -o -name 'bak.*' -o -path '*/bak/*' -o -name '*.BAK' -o -name 'BAK.*' -o -path '*/BAK/*' \
-o -name '*.tmp' -o -name 'tmp.*' -o -path '*/tmp/*' -o -name '*.TMP' -o -name 'TMP.*' -o -path '*/TMP/*' \
-o -name '*.old' -o -name 'old.*' -o -path '*/old/*' -o -name '*.OLD' -o -name 'OLD.*' -o -path '*/OLD/*' \
-o -name '*.new' -o -name 'new.*' -o -path '*/new/*' -o -name '*.NEW' -o -name 'NEW.*' -o -path '*/NEW/*' \
-o -name '*.save' -o -name 'save.*' -o -path '*/save/*' -o -name '*.SAVE' -o -name 'SAVE.*' -o -path '*/SAVE/*' \
')'])
dnl We are using find to find the files, but they can be listed manually also.
dnl And they don't have to all be in the same call to SAMRAI_LINK_FILES.
dnl samrai_typical_example_files should try to find directories named
dnl *input*, but not if it is a subdirectory of another directory
dnl named *input*.  It should find certain files but, to avoid
dnl redundancies and bad links, not if those files are under subdirectories
dnl named *input*.  The reason for treating directories named *input*
dnl specially is to reduce the exploding number of links to increasing
dnl numbers of input files.

dnl
dnl Don't do links if compiling in the source directory
dnl
if test `pwd` != `cd "$srcdir" && pwd`
then 

     dnl
     dnl Links for input files in test directory for input files.
     dnl
     define(samrai_test_inputs,[ '(' -type d -name '*inputs*' '!' -path '*/*inputs*/*' ')' ])
     SAMRAI_LINK_FILES([ esyscmd(find source/test samrai_test_inputs | sort --ignore-case) ])

fi

dnl Undefine the m4 symbols not needed anymore.
dnl (Keep samrai_find_excludes in case it do more finds below.)
undefine([samrai_test_inputs])

dnl
dnl Generate the output files.
dnl

dnl Find all Makefile.in and associated subdirectories.
subdirs="${subdirs} source"
subdirs="${subdirs} esyscmd(find source tools	samrai_find_excludes -name Makefile.in -print | sed 's%/Makefile.in$%%g' | sort --ignore-case)"

unset makefiles
for i in $subdirs; do makefiles="$makefiles $i/Makefile"; done
CASC_AC_LOG_VAR(makefiles)
CASC_AC_LOG_VAR(subdirs)
$MKDIR_P $subdirs

AC_OUTPUT([
Makefile
config/Makefile.config config/Makefile.config.install
docs/Makefile docs/Doxyfile docs/devDoxyfile
${makefiles}
],[
dnl These are the commands that will execute after the file generations.
dnl They are run by the generated config.status script.

rm -rf Templates.DB ti_files ii_files

$MKDIR_P config include lib bin $subdirs

dnl
dnl Don't do installs if compiling in the source directory
dnl
if test `pwd` != `cd "$srcdir" && pwd`
then 
     $INSTALL  $srcdir/COPYRIGHT COPYRIGHT
     $INSTALL  $srcdir/LICENSE LICENSE
     $INSTALL  $srcdir/RELEASE-NOTES RELEASE-NOTES 
     $INSTALL  $srcdir/INSTALL-NOTES INSTALL-NOTES 
     $MKDIR_P source/test/testtools
     $INSTALL  $srcdir/source/test/testtools/* source/test/testtools

     dnl
     dnl Copy README files
     dnl Run the find command where we run autoconf.  DO NOT run it where we configure.
     dnl Of the multitude of systems where configure is run, there is sure to be some
     dnl that do not support the features we require find to support (example: -path).
     dnl
     dnl Exclude files with *input* in path because they are already linked at the parent directory.
     dnl
     readme='esyscmd(find source samrai_find_excludes \! -path '*/*input*/*' -name "*README*" -print | sort --ignore-case)'
     for i in $readme; do
     	 $INSTALL  $srcdir/$i $i
     done
fi
],
[

dnl These commands set the environment for commands executing
dnl after file generations.
srcdir=$srcdir
subdirs="$subdirs"
sundials_dir=$sundials_dir
if test ! `cd $srcdir && pwd -P` = `pwd -P`; then
  source_tree_is_not_compile_tree=1
fi
]

)
